package Utility;

import Controller.Server;
import Utility.Database;
import Utility.ExcelObj;
import Utility.Excel_xls;
import Utility.FailStatement1GmailSendMail;
import Utility.FailStatement2GmailSendMail;
import Utility.Logs;
import Utility.R_Start;
import Utility.ReusableFunctions;
import Utility.RoboKeyType;
import Utility.RobotMouse_key;
import Utility.ServiceLibrary;
import Utility.TC;
import Utility.UpdateResult;
import Utility.UserdefinedCapabalities;
import Utility.UserdefinedLibrary;
import Utility.WebServices;
import Utility.FunctionLibrary.1;
import autoitx4java.AutoItX;
import com.asprise.util.ocr.OCR;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import java.awt.AWTException;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.apache.commons.lang.text.StrSubstitutor;
import org.apache.pdfbox.io.RandomAccessRead;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.PDFTextStripperByArea;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Cookie;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.Platform;
import org.openqa.selenium.Point;
import org.openqa.selenium.ScreenOrientation;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.internal.ProfilesIni;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.internal.WrapsDriver;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.sikuli.script.Screen;

public class FunctionLibrary extends UserdefinedLibrary {
   public static ProfilesIni allProfiles;
   public static RemoteWebDriver driver;
   public static int StoreNum1;
   public static int StoreNum2;
   public static int StoreNum3;
   public static int StoreNum4;
   public static String Storeval1;
   public static String Storeval2;
   public static String StoreVal3;
   public static String Storeval4;
   public static String RANDOMCONST;
   public static String RANDOMCONSTPlusStoreval1;
   public static String RANDOMStoreval1;
   public static FluentWait<WebDriver> Sync;
   public static JavascriptExecutor js;
   public static Database Db;
   public static Alert aa;
   public static RobotMouse_key C_RoboMouse;
   public static Robot RMouse;
   public static int implicitWaitTime;
   public static List<String> ItemList;
   public static ExcelObj Report;
   public static String nanoStart;
   public static String milliStart;
   public static String nanoEnd;
   public static String milliEnd;
   public static String URL;
   public static final String OPT_WIN_TITLE_MATCH_MODE = "WinTitleMatchMode";
   public static long nanoTime;
   public static long milliTime;
   public static String Executeon;
   public static boolean matched = true;

   public FunctionLibrary() throws InterruptedException {
   }

   public static void BrowserSync() throws InterruptedException, IOException {
   }

   public static String CatchStatementWebElement(String ErrMsg) throws IOException, InterruptedException {
      Logs.Ulog(TC.TestDescription);
      Logs.Ulog("ERROR ------ Unable to find the object " + ErrMsg);
      UpdateResult.ActualData = TC.FAIL;
      TC.FailDescription = "May be wrong inputs Script Error ";
      UpdateResult.UpdateStatus();
      return TC.FAIL;
   }

   public static String BrowserRefresh() throws IOException, InterruptedException {
      Logs.Ulog("Refresh Browser");
      driver.navigate().refresh();
      UpdateResult.Done();
      return TC.PASS;
   }

   public static String BrowserBack() throws IOException, InterruptedException {
      Logs.Ulog("Refresh BrowserBack");
      driver.navigate().back();
      UpdateResult.Done();
      return TC.PASS;
   }

   public static String BrowserForward() throws IOException, InterruptedException {
      Logs.Ulog("Refresh BrowserForward");
      driver.navigate().forward();
      UpdateResult.Done();
      return TC.PASS;
   }

   public static String CheckCheckBox() throws IOException, InterruptedException {
      Logs.Ulog("checkbox checked");

      try {
         WebElement e = TORObj();
         String checked = TORObj().getAttribute("checked");
         if(checked == null) {
            e.click();
         }

         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String Click() throws IOException, InterruptedException {
      UpdateDescription("Click on ");
      Logs.Ulog("Executing ObjClick ");

      try {
         WebElement e = TORObj();

         try {
            WrapsDriver e1 = (WrapsDriver)e;
            RemoteWebDriver js = driver;
            e1.getWrappedDriver();
            js.executeScript("arguments[0].click();", new Object[]{e});
         } catch (Throwable arg2) {
            e.click();
         }

         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String CloseBrowser() {
      Logs.Ulog("Closing the browser");

      try {
         try {
            driver.close();
         } catch (Throwable arg1) {
            arg1.printStackTrace();
         }

         try {
            if(R_Start.StoreTable.get("Execute ON Browser").toString().equalsIgnoreCase("Mozilla")) {
               Runtime.getRuntime().exec("TASKKILL /F /IM firefox.exe");
               Runtime.getRuntime().exec("TASKKILL /F /IM geckodriver.exe");
            } else {
               driver.quit();
            }
         } catch (Throwable arg0) {
            arg0.printStackTrace();
         }

         return UpdateResult.Done();
      } catch (Throwable arg2) {
         return TC.FAIL + "Unable to close browser. Check if its open" + arg2.getMessage();
      }
   }

   public static String CloseBrowser_Window_Tab() throws IOException, InterruptedException {
      Logs.Ulog("Clsoing Browser Window / Tab " + TC.InputData);

      try {
         Set arg7 = driver.getWindowHandles();
         Iterator e1 = arg7.iterator();

         for(int WID = 1; WID <= arg7.size(); ++WID) {
            String[] a = TC.InputData.split("Tab");
            int Tno = Integer.parseInt(a[1]);
            String TabID = (String)e1.next();
            if(Tno == WID) {
               driver.switchTo().window(TabID).close();
            }
         }

         Logs.Ulog("Successfully closed tabbed/new window" + TC.InputData);
         return UpdateResult.Done();
      } catch (Throwable arg6) {
         Throwable e = arg6;
         UpdateResult.ActualData = TC.FAIL;

         try {
            UpdateResult.FailDescription = e.getMessage();
         } catch (Throwable arg5) {
            arg5.printStackTrace();
         }

         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String dublicatecheck() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");
      TC.InputData = TC.InputData.replace(".0", "");
      TC.InputData = TC.InputData.replaceAll(" ", "");

      try {
         WebElement e = TORObj();
         String Q2 = getORObject(TC.Param1);
         WebElement Q2List = TORObj();
         String Q3 = getORObject(TC.Param2);
         WebElement Q3List = TORObj();
         ArrayList nlist = new ArrayList();
         List q1options = e.findElements(By.tagName("option"));
         List q2options = Q2List.findElements(By.tagName("option"));
         List q3options = Q3List.findElements(By.tagName("option"));
         Iterator sizeofset = q1options.iterator();

         WebElement allqset;
         while(sizeofset.hasNext()) {
            allqset = (WebElement)sizeofset.next();
            nlist.add(allqset.getText());
         }

         sizeofset = q2options.iterator();

         while(sizeofset.hasNext()) {
            allqset = (WebElement)sizeofset.next();
            nlist.add(allqset.getText());
         }

         sizeofset = q3options.iterator();

         while(sizeofset.hasNext()) {
            allqset = (WebElement)sizeofset.next();
            nlist.add(allqset.getText());
         }

         HashSet allqset1 = new HashSet(nlist);
         int sizeofset1 = allqset1.size();
         System.out.println("sizeofset =" + sizeofset1);
         if(nlist.size() - 2 == allqset1.size()) {
            UpdateResult.ActualData = "No Dublicates";
         } else {
            UpdateResult.ActualData = "Dublicates in the selected list";
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg10) {
         Logs.Ulog("Error ---  while checking dublicates in list");
         return CatchStatementWebElement(arg10.getMessage());
      }
   }

   public static String acceptifAlertPresent() throws InterruptedException, IOException {
      try {
         String ex = "";
         WebDriverWait wait = new WebDriverWait(driver, 10L);
         wait.until(ExpectedConditions.alertIsPresent());
         Alert alert = driver.switchTo().alert();
         alert.accept();
         UpdateResult.ActualData = alert.getText();
         alert.accept();
         return UpdateResult.Done();
      } catch (NoAlertPresentException arg2) {
         Logs.Ulog("Alert not present" + arg2.getMessage());
         return TC.PASS;
      }
   }

   public static String CloseAlert() throws InterruptedException, IOException {
      try {
         Alert ex = driver.switchTo().alert();
         UpdateResult.ActualData = ex.getText();
         ex.accept();
         TC.ExpectedData = ex.getText();
         return UpdateResult.UpdateStatus();
      } catch (NoAlertPresentException arg0) {
         Logs.Ulog("Alert not present" + arg0.getMessage());
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String CloseifAlertPresent() throws InterruptedException, IOException {
      try {
         Alert ex = driver.switchTo().alert();
         UpdateResult.ActualData = ex.getText();
         ex.accept();
         TC.ExpectedData = ex.getText();
         return UpdateResult.UpdateStatus();
      } catch (NoAlertPresentException arg0) {
         Logs.Ulog("Alert not present" + arg0.getMessage());
         return TC.PASS;
      }
   }

   public static String CloseifAlertPresentCheckBoxSelect() throws InterruptedException, AWTException, IOException {
      try {
         Alert ex = driver.switchTo().alert();
         UpdateResult.ActualData = ex.getText();
         TC.ExpectedData = ex.getText();
         return UpdateResult.UpdateStatus();
      } catch (NoAlertPresentException arg0) {
         Logs.Ulog("Alert not present" + arg0.getMessage());
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String DbClick() throws IOException, InterruptedException {
      Logs.Ulog("Executing ObjDbClick ");

      try {
         WebElement e = TORObj();
         Actions Mouse = new Actions(driver);
         Logs.Ulog(" Double Clicked on obj " + e.getText());
         Mouse.doubleClick(e).build().perform();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String DbClickJS() throws IOException, InterruptedException {
      Logs.Ulog("Executing ObjDbClick ");

      try {
         WebElement e = TORObj();
         TORObj().click();
         driver.executeScript("var evt = document.createEvent(\'MouseEvents\'); evt.initMouseEvent(\'dblClick\',true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0,null); arguments[0].dispatchEvent(evt);", new Object[]{e});
         Actions Mouse = new Actions(driver);
         Logs.Ulog(" Double Clicked on obj " + e.getText());
         Mouse.doubleClick(e).build().perform();
         driver.executeScript("arguments[0].dblclick", new Object[]{e});
         driver.executeScript("var evt = document.createEvent(\'MouseEvents\'); evt.initMouseEvent(\'dblClick\',true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0,null); arguments[0].dispatchEvent(evt);", new Object[]{e});
         driver.executeScript("arguments[0].click", new Object[]{e});
         driver.executeScript("var evt = document.createEvent(\'MouseEvents\'); evt.initMouseEvent(\'dblclick\', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0,null); arguements[0].dispatchEvent(evt);", new Object[]{e});
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String DragandDropToElement() throws IOException, InterruptedException {
      Logs.Ulog("Start of DragandDropToElement");

      try {
         WebElement e = TORObj();
         getORObject(TC.InputData);
         WebElement DescElement = TORObj();
         (new Actions(driver)).dragAndDrop(e, DescElement).perform();
         return TC.PASS;
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String DragandDropToElementCoOrdinates() throws IOException, InterruptedException {
      Logs.Ulog("Start of DragandDropToElementCoOrdinates");

      try {
         driver.switchTo().defaultContent();
         driver.manage().timeouts().implicitlyWait(1L, TimeUnit.SECONDS);
         getORObject("Page(Content).LeftTree(Image)");
         RobotMouse_key.MoveMouseToWebEleCoord(TORObj());
         RobotMouse_key.robotPoweredMouseDown();
         driver.switchTo().frame("cq-cf-frame");
         getORObject("Dialog(\"EditComponent\").Image(\"Drop an Image\")");
         RobotMouse_key.MoveMouseToWebEleCoord(TORObj());
         RobotMouse_key.robotPoweredClick();
         C_RoboMouse.MouseRelease();
         C_RoboMouse.MouseRelease();
         System.out.println("Done");
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GenerateRandomStringWithDate() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count before");

      try {
         Storeval1 = (new Date()).toString().replace(":", "").replace(" ", "");
         return Storeval1;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GenerateRANDOMCONST() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count before");

      try {
         RANDOMCONST = (new Date()).toString().replace(":", "").replace(" ", "");
         return RANDOMCONST;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GenerateRandomSSN() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count before");

      try {
         int e = (new Date()).getMinutes();
         int dt = (new Date()).getDate();
         int h = (new Date()).getHours();
         int Da = (new Date()).getDay();
         int mo = (new Date()).getMonth();
         int s = (new Date()).getSeconds();
         int y = (new Date()).getYear();
         int y1 = (new Date()).getYear();
         String RSSN = String.valueOf(e) + s + h + Da + mo + y + y1;
         String SSN1 = RSSN.substring(0, 3) + "-" + RSSN.substring(3, 5) + "-" + RSSN.substring(5, 9);
         Storeval1 = SSN1;
         return Storeval1;
      } catch (Throwable arg9) {
         return CatchStatementWebElement(arg9.getMessage());
      }
   }

   public static String GetAttributeVal_Verify() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyAttributeVal");

      try {
         UpdateResult.ActualData = TORObj().getAttribute(TC.InputData);
         TORObj().isDisplayed();
         TC.ExpectedData = TC.Param1;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GetAttributeVal_Verify_ByIndex() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text GetAttributeVal_Verify_ByIndex ");

      try {
         List e = WebElementsTORObj();
         int index = (int)Double.parseDouble(TC.InputData);
         UpdateResult.ActualData = ((WebElement)e.get(index)).getAttribute(TC.Param1);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String GetAttributeVal_Verify_WebElems() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the GetAttributeVal_Verify_WebElems ");

      try {
         List e = WebElementsTORObj();
         int Count = 0;
         int Icount = e.size();

         for(int i = 0; i < e.size(); ++i) {
            if(((WebElement)e.get(i)).getAttribute(TC.InputData).equals(TC.ExpectedData)) {
               ++Count;
            }
         }

         if(Icount == Count) {
            UpdateResult.ActualData = Icount + TC.ExpectedData;
            TC.ExpectedData = Count + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = Icount + TC.ExpectedData;
            TC.ExpectedData = Count + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String GetAttributeValWebElements_Verify_Byref() throws IOException, InterruptedException {
      Logs.Ulog("Executing GetAttributeValWebElements_Verify_Byref Menu");
      String ByRefObj = TC.Param2;
      String ByRefAttr = TC.Param3;
      String ByRefAttrVal = TC.Param4;
      List EleCollection = WebElementsTORObj();
      getORObject(ByRefObj);
      List EleCollectionRef = WebElementsTORObj();
      int Count = 0;

      try {
         int e;
         for(e = 0; e < EleCollectionRef.size(); ++e) {
            if(((WebElement)EleCollectionRef.get(e)).getAttribute(ByRefAttr).equals(ByRefAttrVal) && ((WebElement)EleCollection.get(e)).getAttribute(TC.InputData).equals(TC.ExpectedData)) {
               ++Count;
               String Edata = TC.ExpectedData;
               UpdateResult.ActualData = ((WebElement)EleCollection.get(e)).getAttribute(TC.InputData);
               UpdateResult.UpdateStatus();
               TC.ExpectedData = Edata;
            }
         }

         e = (int)Double.parseDouble(TC.Param1);
         if(Count == e) {
            UpdateResult.ActualData = "Itemas Found = " + Count;
            TC.ExpectedData = "Itemas Found = " + e;
            Logs.Ulog("Verifying the text Get ElementsByRef Passed ");
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = "Attributes not matched";
            TC.ExpectedData = "";
            Logs.Ulog("Verifying the text Get ElementsByRef failed ");
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg7) {
         return CatchStatementWebElement(arg7.getMessage());
      }
   }

   public static String GetPostionWebEleAfter() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEleAfter");

      try {
         WebElement e = TORObj();
         Point elementLoc = e.getLocation();
         StoreNum3 = elementLoc.getX();
         StoreNum4 = elementLoc.getY();
         return TC.PASS;
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String GetPostionWebEleBefore() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEleBefore");

      try {
         WebElement e = TORObj();
         Point elementLoc = e.getLocation();
         StoreNum1 = elementLoc.getX();
         StoreNum2 = elementLoc.getY();
         return TC.PASS;
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String dsuGetPostion() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEleBefore");

      try {
         WebElement e = TORObj();
         Point elementLoc = e.getLocation();
         Dimension size = e.getSize();
         TC.ExpectedData = elementLoc.toString() + size.toString();
         UpdateResult.ActualData = elementLoc.toString() + size.toString();
         if(TC.ExpectedData == TC.InputData) {
            Logs.Ulog("Verifying the DSUGetPaosition ");
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String HighlightElement() throws InterruptedException {
      Logs.Ulog("High light on object");
      WebElement element = null;

      try {
         element = TORObj();
      } catch (IOException arg3) {
         arg3.printStackTrace();
      }

      try {
         for(int t = 0; t < 2; ++t) {
            WrapsDriver wrappedElement = (WrapsDriver)element;
            RemoteWebDriver js = driver;
            wrappedElement.getWrappedDriver();
            js.executeScript("arguments[0].setAttribute(\'style\',arguments[1]);", new Object[]{element, "color: black ; border: 6px solid black;"});
            Thread.sleep(250L);
            js.executeScript("arguments[0].setAttribute(\'style\',arguments[1]);", new Object[]{element, ""});
            Thread.sleep(250L);
         }
      } catch (Throwable arg4) {
         Logs.Ulog("ERROR----Failed on High light on object");
      }

      Logs.Ulog("Object Highlighted");
      return TC.PASS;
   }

   public static String ClickElement() throws InterruptedException, IOException {
      Logs.Ulog("Click on obj");
      WebElement element = TORObj();

      try {
         WrapsDriver t = (WrapsDriver)element;
         RemoteWebDriver js = driver;
         t.getWrappedDriver();
         js.executeScript("arguments[0].click", new Object[]{element});
      } catch (Throwable arg2) {
         Logs.Ulog("ERROR----Failed to click on object");
      }

      Logs.Ulog("Object clicked");
      return TC.PASS;
   }

   public static String HighlightElements(WebElement element) throws InterruptedException {
      Logs.Ulog("High light on object");

      try {
         for(int t = 0; t < 2; ++t) {
            WrapsDriver wrappedElement = (WrapsDriver)element;
            RemoteWebDriver js = driver;
            wrappedElement.getWrappedDriver();
            js.executeScript("arguments[0].setAttribute(\'style\',arguments[1]);", new Object[]{element, "color: black ; border: 6px solid black;"});
            Thread.sleep(250L);
            js.executeScript("arguments[0].setAttribute(\'style\',arguments[1]);", new Object[]{element, ""});
            Thread.sleep(250L);
         }
      } catch (Throwable arg3) {
         Logs.Ulog("ERROR----Failed on High light on object");
      }

      Logs.Ulog("Object Highlighted");
      return TC.PASS;
   }

   public static String InputText() throws IOException, InterruptedException {
      Logs.Ulog(" Executing InputText " + TC.InputData);

      try {
         String[] e;
         String RandVar1;
         if(TC.InputData.startsWith("RANDOMCONST+")) {
            if(RANDOMCONST == null) {
               GenerateRANDOMCONST();
            }

            e = TC.InputData.split("\\+");
            RandVar1 = RANDOMCONST + e[1];
            RANDOMCONSTPlusStoreval1 = RandVar1;
            TORObj().clear();
            TORObj().sendKeys(new CharSequence[]{RANDOMCONSTPlusStoreval1});
            UpdateResult.ActualData = RANDOMCONSTPlusStoreval1;
            R_Start.StoreTable.put(TC.InputData, RandVar1);
            TC.ExpectedData = RandVar1;
            Logs.Ulog("InputText on obj Done ");
         } else if(TC.InputData.startsWith("RANDOM+")) {
            TORObj().clear();
            e = TC.InputData.split("\\+");
            RandVar1 = GenerateRandomStringWithDate() + e[1];
            TORObj().sendKeys(new CharSequence[]{RandVar1});
            UpdateResult.ActualData = RandVar1;
            TC.ExpectedData = RandVar1;
            Logs.Ulog("InputText on obj Done ");
            R_Start.StoreTable.put(TC.InputData, RandVar1);
         } else {
            label42: {
               label41: {
                  String e1 = TC.InputData;
                  switch(TC.InputData.hashCode()) {
                  case -1884956477:
                     if(e1.equals("RANDOM")) {
                        TORObj().clear();
                        TORObj().sendKeys(new CharSequence[]{GenerateRandomStringWithDate()});
                        RANDOMStoreval1 = GenerateRandomStringWithDate();
                        UpdateResult.ActualData = RANDOMStoreval1;
                        TC.ExpectedData = RANDOMStoreval1;
                        Logs.Ulog("InputText on obj Done ");
                        R_Start.StoreTable.put(TC.InputData, RANDOMStoreval1);
                        break label42;
                     }
                     break;
                  case 1456957536:
                     if(e1.equals("RANDOMCONST")) {
                        if(RANDOMCONST == null) {
                           GenerateRANDOMCONST();
                        }

                        TORObj().clear();
                        TORObj().sendKeys(new CharSequence[]{RANDOMCONST});
                        UpdateResult.ActualData = RANDOMCONST;
                        TC.ExpectedData = RANDOMCONST;
                        Logs.Ulog("InputText on obj Done ");
                        R_Start.StoreTable.put(TC.InputData, RANDOMCONST);
                        break label41;
                     }
                     break;
                  case 1959071307:
                     if(e1.equals("RANDOMSSN")) {
                        break label41;
                     }
                  }

                  TORObj().clear();
                  TORObj().sendKeys(new CharSequence[]{TC.InputData});
                  UpdateResult.ActualData = TC.InputData;
                  TC.ExpectedData = TC.InputData;
                  Logs.Ulog("InputText on obj Done ");
                  break label42;
               }

               TORObj().clear();
               TORObj().sendKeys(new CharSequence[]{GenerateRandomSSN()});
               UpdateResult.ActualData = Storeval1;
               TC.ExpectedData = Storeval1;
               Logs.Ulog("InputText on obj Done ");
            }
         }

         UpdateDescription("Enter text  " + TC.ExpectedData + " in ");
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String SetInputText() throws IOException, InterruptedException {
      Logs.Ulog(" Executing InputText ");

      try {
         WebElement e = TORObj();
         Logs.Ulog("InputText on obj " + e.getText());
         e.clear();
         if(TC.InputData.equalsIgnoreCase("RANDOM")) {
            e.sendKeys(new CharSequence[]{"T"});
            e.clear();
            js = driver;
            js.executeScript("arguments[0].value=\'" + GenerateRandomStringWithDate() + "\'", new Object[]{e});
            UpdateResult.ActualData = Storeval1;
            TC.ExpectedData = Storeval1;
            Logs.Ulog("InputText on obj Done ");
         } else {
            e.sendKeys(new CharSequence[]{"T"});
            e.clear();
            js = driver;
            js.executeScript("arguments[0].value=\'" + TC.InputData + "\'", new Object[]{e});
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SetAttribute() throws IOException, InterruptedException {
      Logs.Ulog(" Executing SetAttribute ");

      try {
         WebElement e = TORObj();
         Logs.Ulog("SetAttribute on obj " + e.getText());
         js = driver;
         js.executeScript("arguments[0]." + TC.Param1 + "=\'" + TC.InputData + "\'", new Object[]{e});
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String InputTextElementsByIndex() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text InputTextElementsByIndex ");

      try {
         List e = WebElementsTORObj();
         int index = (int)Double.parseDouble(TC.InputData);
         ((WebElement)e.get(index)).clear();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         if(TC.Param1.equalsIgnoreCase("RANDOM")) {
            ((WebElement)e.get(index)).clear();
            ((WebElement)e.get(index)).sendKeys(new CharSequence[]{GenerateRandomStringWithDate()});
            UpdateResult.ActualData = Storeval1;
            TC.ExpectedData = Storeval1;
         } else {
            ((WebElement)e.get(index)).clear();
            ((WebElement)e.get(index)).sendKeys(new CharSequence[]{TC.Param1});
            UpdateResult.ActualData = TC.Param1;
            TC.ExpectedData = TC.Param1;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String SetInputTextByIndex() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text InputTextElementsByIndex ");

      try {
         List e = WebElementsTORObj();
         int index = (int)Double.parseDouble(TC.InputData);
         ((WebElement)e.get(index)).clear();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         if(TC.Param1.equalsIgnoreCase("RANDOM")) {
            ((WebElement)e.get(index)).clear();
            ((WebElement)e.get(index)).sendKeys(new CharSequence[]{"T"});
            ((WebElement)e.get(index)).clear();
            js = driver;
            js.executeScript("arguments[0].value=\'" + GenerateRandomStringWithDate() + "\'", new Object[]{e.get(index)});
            UpdateResult.ActualData = Storeval1;
            TC.ExpectedData = Storeval1;
         } else {
            ((WebElement)e.get(index)).clear();
            ((WebElement)e.get(index)).sendKeys(new CharSequence[]{"T"});
            ((WebElement)e.get(index)).clear();
            js = driver;
            js.executeScript("arguments[0].value=\'" + TC.Param1 + "\'", new Object[]{e.get(index)});
            UpdateResult.ActualData = TC.Param1;
            TC.ExpectedData = TC.Param1;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String InputTextElementsByValue() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text InputTextElementsByIndex ");

      try {
         List e = WebElementsTORObj();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         int i;
         if(TC.InputData.equalsIgnoreCase("RANDOM")) {
            for(i = 0; i < e.size(); ++i) {
               if(((WebElement)e.get(i)).getAttribute("value").equals(TC.Param1)) {
                  ((WebElement)e.get(i)).clear();
                  ((WebElement)e.get(i)).sendKeys(new CharSequence[]{GenerateRandomStringWithDate()});
               }
            }
         } else {
            for(i = 0; i <= e.size(); ++i) {
               if(((WebElement)e.get(i)).getAttribute("value").equals(TC.Param1)) {
                  ((WebElement)e.get(i)).clear();
                  ((WebElement)e.get(i)).sendKeys(new CharSequence[]{TC.Param2});
               }
            }
         }

         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String SetInputTextByValue() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text InputTextElementsByIndex ");

      try {
         List e = WebElementsTORObj();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         int i;
         if(TC.InputData.equalsIgnoreCase("RANDOM")) {
            for(i = 0; i < e.size(); ++i) {
               if(((WebElement)e.get(i)).getAttribute("value").equals(TC.Param1)) {
                  ((WebElement)e.get(i)).clear();
                  ((WebElement)e.get(i)).sendKeys(new CharSequence[]{"T"});
                  ((WebElement)e.get(i)).clear();
                  js = driver;
                  js.executeScript("arguments[0].value=\'" + GenerateRandomStringWithDate() + "\'", new Object[]{e.get(i)});
                  Thread.sleep(1000L);
               }
            }
         } else {
            for(i = 0; i <= e.size(); ++i) {
               if(((WebElement)e.get(i)).getAttribute("value").equals(TC.Param1)) {
                  ((WebElement)e.get(i)).clear();
                  ((WebElement)e.get(i)).sendKeys(new CharSequence[]{"T"});
                  ((WebElement)e.get(i)).clear();
                  js = driver;
                  js.executeScript("arguments[0].value=\'" + TC.Param2 + "\'", new Object[]{e.get(i)});
               }
            }
         }

         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String MaximizeWindow() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Maximize window");
         driver.manage().window().maximize();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String MouseclickAndHold() throws InterruptedException, IOException {
      Logs.Ulog("Executing MouseclickAndHold Menu");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" MouseclickAndHold  on obj " + e.getText());
         Actions Mouse = new Actions(driver);
         Mouse.clickAndHold(e).perform();
         Thread.sleep(1000L);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String MouseMoveOnObj() throws InterruptedException, IOException {
      Logs.Ulog("Executing Select Menu");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" Mouse move on obj " + e.getText());
         Actions Mouse = new Actions(driver);
         Mouse.moveToElement(e).perform();
         Thread.sleep(500L);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String navigate() throws IOException, InterruptedException {
      Logs.Ulog("Navigating to URL");

      try {
         Thread.sleep(2000L);
         driver.navigate().to(TC.InputData);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String navigateInNewtab() throws IOException, InterruptedException {
      Logs.Ulog("Navigating to URL");

      try {
         Thread.sleep(2000L);
         driver.findElement(By.cssSelector("body")).sendKeys(new CharSequence[]{Keys.F12});
         ArrayList e = new ArrayList(driver.getWindowHandles());
         driver.switchTo().window((String)e.get(0));
         driver.navigate().to("https://qa.dmp.aig.net/cf#/content/qaaig/release-8/us/en/fxeiadi.html");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String SendkeyboardKeysF12() throws IOException, InterruptedException {
      Logs.Ulog("SendkeyboardKeysF12");

      try {
         driver.findElement(By.cssSelector("body")).sendKeys(new CharSequence[]{Keys.F12});
         System.out.println("Title = " + driver.getTitle());
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String navigateByConcat() throws IOException, InterruptedException {
      Logs.Ulog("Navigating to URL");

      try {
         driver.navigate().to(TC.InputData + TC.ExpectedData + TC.Param1 + TC.Param2);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String GetURL() throws IOException, InterruptedException {
      Logs.Ulog("Navigating to URL");

      try {
         driver.get(TC.InputData);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String ClickElementsByIndex() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text ObjClickElementsByIndex ");

      try {
         List e = WebElementsTORObj();
         int index = (int)Double.parseDouble(TC.InputData);
         ((WebElement)e.get(index)).click();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String ObjectGetAfterCount() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count before");

      try {
         List e = WebElementsTORObj();
         StoreNum2 = e.size();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String ObjectGetBeforeCount() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count before");

      try {
         List e = WebElementsTORObj();
         StoreNum1 = e.size();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyObjExist() throws IOException, InterruptedException {
      Logs.Ulog("Checking existance of element");

      try {
         boolean e = TORObj().isDisplayed();
         UpdateResult.ActualData = String.valueOf(e);
         TC.ExpectedData = String.valueOf(true);
         TC.PassDescription = "Object Exist ";
         TC.FailDescription = "Object Not Exist ";
         UpdateDescription("Verify Existance of the Object");
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = "FALSE";
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      }
   }

   public static String VerifyObjNotExist() throws IOException, InterruptedException {
      Logs.Ulog("Checking existance of element");
      ReSetSyncTime();
      boolean Obj = false;

      try {
         int a = (int)Double.parseDouble(TC.InputData);
         Thread.sleep((long)a);

         for(int i = 0; i <= a; ++i) {
            Thread.sleep(1000L);

            try {
               if(NonExceptionTORObj().isDisplayed()) {
                  Logs.Ulog("Element Displayed ");
                  SetDefaultSyncTime();
                  Obj = true;
                  return "true";
               }
            } catch (Throwable arg3) {
               ;
            }
         }
      } catch (NumberFormatException arg4) {
         Thread.sleep(5000L);
         Logs.Ulog("Please provide max wait time ininput data column ");
      }

      if(Obj) {
         boolean arg5 = NonExceptionTORObj().isDisplayed();
         UpdateResult.ActualData = "Object Displayed";
         TC.ExpectedData = "Object should not Displayed ";
         SetDefaultSyncTime();
         return UpdateResult.UpdateStatus();
      } else {
         SetDefaultSyncTime();
         UpdateResult.ActualData = "Object Not Displayed";
         TC.ExpectedData = "Object Not Displayed";
         return UpdateResult.UpdateStatus();
      }
   }

   public static String VerifyRegularExpression() throws IOException, InterruptedException {
      Logs.Ulog("Verify regular expression");

      try {
         boolean e = TC.TestObjects.matches(TC.InputData);
         UpdateResult.ActualData = String.valueOf(e);
         TC.ExpectedData = String.valueOf(true);
         TC.PassDescription = "Pattern matches ";
         TC.FailDescription = "Pattern don\'t matche ";
         UpdateDescription("Verify Pattern matches");
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = "FALSE";
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      }
   }

   public static String OpenApp() throws IOException, InterruptedException {
      try {
         String e;
         label289: {
            driver = null;
            Logs.Ulog("Opening browser");
            e = (String)R_Start.StoreTable.get("Execute ON Browser");
            String arg0;
            DesiredCapabilities Headless;
            DesiredCapabilities T;
            String arg32;
            String arg33;
            DesiredCapabilities arg34;
            String arg36;
            switch((arg0 = e.toString()).hashCode()) {
            case -1826030688:
               if(arg0.equals("Safari")) {
                  try {
                     if(R_Start.StoreTable.get("Execute On Grid").equals("YY")) {
                        T = DesiredCapabilities.safari();
                        driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("Set Grid IP")), T);
                     } else {
                        driver = new SafariDriver();
                     }
                  } catch (Throwable arg20) {
                     Logs.Ulog("Error While Launching browser Safari " + arg20.getMessage());
                  }
                  break label289;
               }
               break;
            case -1559699263:
               if(arg0.equals("PerfectoIOSDevice")) {
                  try {
                     T = new DesiredCapabilities();
                     if(R_Start.StoreTable.get("PF_InstallApp").equals("YY")) {
                        T.setCapability("app", R_Start.StoreTable.get("PF_IOSAppPath"));
                     }

                     T.setCapability("deviceName", R_Start.StoreTable.get("PF_IOSdeviceName"));
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     T.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     T.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     T.setCapability("automationName", "Appium");
                     T.setCapability("platformName", "iOS");
                     T.setCapability("autoInstrument", true);
                     T.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     T.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     T.setCapability("bundleId", R_Start.StoreTable.get("App_bundleId"));
                     arg33 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new IOSDriver(new URL("https://" + arg33 + "/wd/hub"), T);
                     Thread.sleep(20000L);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg18) {
                     Logs.Ulog("Error While Launching IOSDriver " + arg18.getMessage());
                  }
                  break label289;
               }
               break;
            case -1382919984:
               if(arg0.equals("Mozilla")) {
                  try {
                     if(R_Start.StoreTable.get("Execute On Grid").equals("YY")) {
                        Headless = DesiredCapabilities.firefox();
                        driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("Set Grid IP")), Headless);
                        UpdateResult.UpDateBrowserVer();
                     } else {
                        driver = new FirefoxDriver(UserdefinedCapabalities.FirefoxCapabality());
                        UpdateResult.UpDateBrowserVer();
                     }
                  } catch (Throwable arg27) {
                     Logs.Ulog("Error While Launching browser Mozilla" + arg27.getMessage());
                  }
                  break label289;
               }
               break;
            case -1280112497:
               if(arg0.equals("HeadLess_MagicDriver")) {
                  new Server();
                  Server.MagicDriver();
                  break label289;
               }
               break;
            case -1191856242:
               if(arg0.equals("HeadLess_Driver")) {
                  new Server();
                  Server.HeadlessDriver();
                  break label289;
               }
               break;
            case -938179933:
               if(arg0.equals("PerfectoAndroidDevice")) {
                  try {
                     T = new DesiredCapabilities();
                     if(R_Start.StoreTable.get("PF_InstallApp").equals("YY")) {
                        T.setCapability("app", R_Start.StoreTable.get("PF_AndroidAppPath"));
                     }

                     T.setCapability("deviceName", R_Start.StoreTable.get("PF_AndroiddeviceName"));
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     T.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     T.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     T.setCapability("automationName", "Appium");
                     T.setCapability("platformName", "Android");
                     T.setCapability("autoInstrument", true);
                     T.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     T.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     T.setCapability("appPackage", R_Start.StoreTable.get("appPackage"));
                     T.setCapability("appActivity", R_Start.StoreTable.get("appActivity"));
                     arg33 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new AndroidDriver(new URL("https://" + arg33 + "/wd/hub"), T);
                     Thread.sleep(20000L);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg17) {
                     Logs.Ulog("Error While Launching PerfectoAndroidDevice " + arg17.getMessage());
                  }
                  break label289;
               }
               break;
            case -668571701:
               if(arg0.equals("Perfecto_Desktop_Browsers")) {
                  try {
                     T = new DesiredCapabilities();
                     T.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     T.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg33 = (String)R_Start.StoreTable.get("PF_host");
                     T.setCapability("platformName", R_Start.StoreTable.get("PF_OS_platformName"));
                     T.setCapability("platformVersion", R_Start.StoreTable.get("PF_OS_platformVersion"));
                     T.setCapability("browserName", R_Start.StoreTable.get("PF_OS_browserName"));
                     T.setCapability("browserVersion", R_Start.StoreTable.get("PF_OS_browserVersion"));
                     T.setCapability("resolution", R_Start.StoreTable.get("PF_OS_resolution"));
                     T.setCapability("location", R_Start.StoreTable.get("PF_OS_location"));
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     driver = new RemoteWebDriver(new URL("https://" + arg33 + "/wd/hub"), T);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().pageLoadTimeout((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg12) {
                     Logs.Ulog("Error While Launching Perfecto_Desktop_Browser " + arg12.getMessage());
                  }
                  break label289;
               }
               break;
            case -521138727:
               if(arg0.equals("AndroidBrowser")) {
                  try {
                     T = new DesiredCapabilities();
                     T.setCapability("browserName", "Browser");
                     T.setCapability("deviceName", "PrayagRaj");
                     T.setCapability("platformName", "Android");
                     T.setCapability("app", "Chrome");
                     T.setCapability("newCommandTimeout", Integer.valueOf(10000));
                     T.setCapability("app-package", "com.android.chrome");
                     T.setCapability("app-activity", "com.google.android.apps.chrome.Main");
                     driver = new RemoteWebDriver(new URL("http://127.0.0.1:4723/wd/hub"), T);
                  } catch (Throwable arg22) {
                     Logs.Ulog("Error While Launching browser Chrome on Android device" + arg22.getMessage());
                  }
                  break label289;
               }
               break;
            case -427667333:
               if(arg0.equals("PerfectoAndroidBrowser")) {
                  try {
                     arg32 = "mobileOS";
                     arg34 = new DesiredCapabilities(arg32, "", Platform.ANY);
                     arg34.setCapability("deviceName", R_Start.StoreTable.get("PF_AndroiddeviceName"));
                     arg34.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     arg34.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg34.setCapability("automationName", "Appium");
                     arg34.setCapability("platformName", "Android");
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     arg34.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     arg34.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     arg36 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new AndroidDriver(new URL("https://" + arg36 + "/wd/hub"), arg34);
                     Thread.sleep(20000L);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg16) {
                     Logs.Ulog("Error While Launching PerfectoAndroidDevice " + arg16.getMessage());
                  }
                  break label289;
               }
               break;
            case -213394947:
               if(arg0.equals("PerfectoiOSBrowser")) {
                  try {
                     driver = null;
                     arg32 = "mobileOS";
                     arg34 = new DesiredCapabilities(arg32, "", Platform.ANY);
                     arg34.setCapability("deviceName", R_Start.StoreTable.get("PF_IOSdeviceName"));
                     arg34.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     arg34.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg34.setCapability("platformName", "iOS");
                     arg34.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     arg36 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new RemoteWebDriver(new URL("https://" + arg36 + "/wd/hub"), arg34);
                     driver.manage().deleteAllCookies();
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                     break label289;
                  } catch (Throwable arg9) {
                     Logs.Ulog("ERROR -- While start UpdateSetupBrowser_device  " + arg9.getMessage());
                     CatchStatementWebElement("ERROR -- While start UpdateSetupBrowser_device " + arg9.getMessage());
                     return TC.FAIL;
                  }
               }
               break;
            case 2332:
               if(arg0.equals("IE")) {
                  try {
                     if(R_Start.StoreTable.get("Execute On Grid").equals("YY")) {
                        driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("Set Grid IP")), UserdefinedCapabalities.IECapabality());
                     } else {
                        driver = new InternetExplorerDriver(UserdefinedCapabalities.IECapabality());
                        UpdateResult.UpDateBrowserVer();
                     }
                  } catch (Throwable arg24) {
                     DeletAllCookies();
                     Logs.Ulog("Error While Launching browser IE" + arg24.getMessage());
                  }
                  break label289;
               }
               break;
            case 66517:
               if(arg0.equals("CBT")) {
                  try {
                     T = new DesiredCapabilities();
                     T.setCapability("name", R_Start.StoreTable.get("CBT_name"));
                     T.setCapability("build", R_Start.StoreTable.get("CBT_build"));
                     T.setCapability("browser_api_name", R_Start.StoreTable.get("CBT_browser_api_name"));
                     T.setCapability("os_api_name", R_Start.StoreTable.get("CBT_os_api_name"));
                     T.setCapability("screen_resolution", R_Start.StoreTable.get("CBT_screen_resolution"));
                     T.setCapability("record_video", R_Start.StoreTable.get("CBT_record_video"));
                     T.setCapability("record_network", R_Start.StoreTable.get("CBT_record_network"));
                     driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("CBT_Host")), T);
                     System.out.println("Loading Url");
                  } catch (Throwable arg11) {
                     Logs.Ulog("Error While Launching AndroidLocalDevice " + arg11.getMessage());
                  }
                  break label289;
               }
               break;
            case 75015780:
               if(arg0.equals("AvailablePerfectoAndroidBrowser")) {
                  try {
                     arg32 = "mobileOS";
                     arg34 = new DesiredCapabilities(arg32, "", Platform.ANY);
                     arg34.setCapability("platformVersion", R_Start.StoreTable.get("PF_platformVersion"));
                     arg34.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     arg34.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg34.setCapability("automationName", "Appium");
                     arg34.setCapability("platformName", "Android");
                     arg34.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     arg34.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     arg36 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new AndroidDriver(new URL("https://" + arg36 + "/wd/hub"), arg34);
                     Thread.sleep(20000L);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg15) {
                     Logs.Ulog("Error While Launching AvailablePerfectoAndroidBrowser " + arg15.getMessage());
                  }
                  break label289;
               }
               break;
            case 76395443:
               if(arg0.equals("Opera")) {
                  try {
                     if(R_Start.StoreTable.get("Execute On Grid").equals("YY")) {
                        T = DesiredCapabilities.opera();
                        driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("Set Grid IP")), T);
                     } else {
                        T = new DesiredCapabilities();
                        T.setCapability("opera.binary", R_Start.StoreTable.get("Opera_Exe_Location"));
                        T.setCapability("opera.autostart ", true);
                        driver = new OperaDriver(T);
                     }
                  } catch (Throwable arg21) {
                     Logs.Ulog("Error While Launching browser Opera" + arg21.getMessage());
                  }
                  break label289;
               }
               break;
            case 343642066:
               if(arg0.equals("AndroidLocalDevice")) {
                  try {
                     Headless = new DesiredCapabilities();
                     if(R_Start.StoreTable.get("InstallApp").equals("YY")) {
                        File HeadLess_MagicDriver = new File((String)R_Start.StoreTable.get("APKapp_Path"));
                        Headless.setCapability("app", HeadLess_MagicDriver.getAbsolutePath());
                     }

                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     Headless.setCapability("deviceName", R_Start.StoreTable.get("deviceName"));
                     Headless.setCapability("platformName", "Android");
                     Headless.setCapability("autoInstrument", true);
                     Headless.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     Headless.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     Headless.setCapability("appPackage", R_Start.StoreTable.get("appPackage"));
                     Headless.setCapability("appActivity", R_Start.StoreTable.get("appActivity"));
                     Headless.setCapability("newCommandTimeout", R_Start.StoreTable.get("NEW_COMMAND_TIMEOUT"));
                     driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("App_host")), Headless);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                     Thread.sleep(20000L);
                  } catch (Throwable arg25) {
                     Logs.Ulog("Error While Launching AndroidLocalDevice " + arg25.getMessage());
                  }
                  break label289;
               }
               break;
            case 864411834:
               if(arg0.equals("MozillaWithoutGeko")) {
                  try {
                     if(R_Start.StoreTable.get("Execute On Grid").equals("YY")) {
                        Headless = DesiredCapabilities.firefox();
                        driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("Set Grid IP")), Headless);
                        UpdateResult.UpDateBrowserVer();
                     } else {
                        driver = new FirefoxDriver(UserdefinedCapabalities.FirefoxMozillaWithoutGekoCapabality());
                        UpdateResult.UpDateBrowserVer();
                     }
                  } catch (Throwable arg26) {
                     Logs.Ulog("Error While Launching browser Mozilla" + arg26.getMessage());
                  }
                  break label289;
               }
               break;
            case 882786598:
               if(arg0.equals("jbrowserdriver")) {
                  new Server();
                  Server.jbrowserdriver();
                  break label289;
               }
               break;
            case 963733638:
               if(arg0.equals("AvailablePerfectoIOSBrowser")) {
                  try {
                     arg32 = "mobileOS";
                     arg34 = new DesiredCapabilities(arg32, "", Platform.ANY);
                     arg34.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     arg34.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg34.setCapability("automationName", "Appium");
                     arg34.setCapability("platformName", "iOS");
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     arg34.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     arg34.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     arg36 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new IOSDriver(new URL("https://" + arg36 + "/wd/hub"), arg34);
                     Thread.sleep(20000L);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg14) {
                     Logs.Ulog("Error While Launching PerfectoAndroidDevice " + arg14.getMessage());
                  }
                  break label289;
               }
               break;
            case 1420841638:
               if(arg0.equals("PerfectoBrowser")) {
                  try {
                     driver = null;
                     arg32 = "mobileOS";
                     arg34 = new DesiredCapabilities(arg32, "", Platform.ANY);
                     arg34.setCapability("deviceName", R_Start.StoreTable.get("PF_AndroiddeviceName"));
                     arg34.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     arg34.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg34.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     arg36 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new RemoteWebDriver(new URL("https://" + arg36 + "/wd/hub"), arg34);
                     Thread.sleep(20000L);
                     driver.manage().deleteAllCookies();
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                     break label289;
                  } catch (Throwable arg10) {
                     Logs.Ulog("ERROR -- While start UpdateSetupBrowser_device  " + arg10.getMessage());
                     CatchStatementWebElement("ERROR -- While start UpdateSetupBrowser_device " + arg10.getMessage());
                     return TC.FAIL;
                  }
               }
               break;
            case 1601511046:
               if(arg0.equals("BlackBurrey")) {
                  try {
                     T = DesiredCapabilities.chrome();
                     driver = new RemoteWebDriver(new URL("http://169.254.0.1:1338"), T);
                  } catch (Throwable arg19) {
                     Logs.Ulog("Error While Launching browser chrome on BlackBurrey " + arg19.getMessage());
                  }
                  break label289;
               }
               break;
            case 1780069917:
               if(arg0.equals("PerfectoIOSBrowser")) {
                  try {
                     arg32 = "mobileOS";
                     arg34 = new DesiredCapabilities(arg32, "", Platform.ANY);
                     arg34.setCapability("deviceName", R_Start.StoreTable.get("PF_IOSdeviceName"));
                     arg34.setCapability("user", R_Start.StoreTable.get("PF_user"));
                     arg34.setCapability("password", R_Start.StoreTable.get("PF_password"));
                     arg34.setCapability("automationName", "Appium");
                     arg34.setCapability("platformName", "iOS");
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     arg34.setCapability("unicodeKeyboard", R_Start.StoreTable.get("unicodeKeyboard"));
                     arg34.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
                     arg36 = (String)R_Start.StoreTable.get("PF_host");
                     driver = new IOSDriver(new URL("https://" + arg36 + "/wd/hub"), arg34);
                     Thread.sleep(20000L);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg13) {
                     Logs.Ulog("Error While Launching PerfectoAndroidDevice " + arg13.getMessage());
                  }
                  break label289;
               }
               break;
            case 1905833056:
               if(arg0.equals("BrowserStack")) {
                  try {
                     if(R_Start.StoreTable.get("EnableProxy").equals("YY")) {
                        System.getProperties().put("http.proxyHost", R_Start.StoreTable.get("http_proxyHost"));
                        System.getProperties().put("http.proxyPort", R_Start.StoreTable.get("http_proxyPort"));
                        System.getProperties().put("https.proxyHost", R_Start.StoreTable.get("https_proxyHost"));
                        System.getProperties().put("https.proxyPort", R_Start.StoreTable.get("https_proxyPort"));
                     }

                     HashMap arg31 = null;

                     try {
                        String[] capabilities = R_Start.StoreTable.get("BrowserStackConfig").toString().split(";");
                        arg31 = new HashMap();

                        for(int host = 0; host <= capabilities.length - 1; ++host) {
                           String[] it = capabilities[host].split("=");
                           arg31.put(it[0], it[1]);
                        }
                     } catch (Throwable arg28) {
                        Logs.Ulog("Error While spliting capabalities " + arg28.getMessage());
                     }

                     arg33 = "https://" + arg31.get("USERNAME") + ":" + arg31.get("AUTOMATE_KEY") + "@hub-cloud.browserstack.com/wd/hub";
                     DesiredCapabilities arg35 = new DesiredCapabilities();
                     Iterator arg37 = arg31.entrySet().iterator();

                     while(arg37.hasNext()) {
                        Entry pair = (Entry)arg37.next();
                        arg35.setCapability(pair.getKey().toString(), pair.getValue().toString());
                     }

                     driver = new RemoteWebDriver(new URL(arg33), arg35);
                     implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
                     driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
                  } catch (Throwable arg29) {
                     Logs.Ulog("Error While Launching PerfectoAndroidDevice " + arg29.getMessage());
                  }
                  break label289;
               }
               break;
            case 2017705626:
               if(arg0.equals("Chrome")) {
                  try {
                     if(R_Start.StoreTable.get("Execute On Grid").equals("YY")) {
                        T = DesiredCapabilities.chrome();
                        driver = new RemoteWebDriver(new URL((String)R_Start.StoreTable.get("Set Grid IP")), UserdefinedCapabalities.ChromeCapabality());
                     } else {
                        driver = new ChromeDriver(UserdefinedCapabalities.ChromeCapabality());
                        UpdateResult.UpDateBrowserVer();
                        driver.manage().deleteAllCookies();
                     }
                  } catch (Throwable arg23) {
                     Logs.Ulog("Error While Launching browser Chrome" + arg23.getMessage());
                  }
                  break label289;
               }
            }

            CatchStatementWebElement("ERROR -- No browser has been selecte please check global setup sheet row number 2 config value column ");
         }

         PrintDeviceVersion();
         UpdateResult.ExpectedData = e;
         UpdateResult.ActualData = e;
         TC.ExpectedData = e;
         if(C_RoboMouse == null) {
            C_RoboMouse = new RobotMouse_key(driver);
         }

         if(RMouse == null) {
            RMouse = new Robot();
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg30) {
         UpdateResult.ActualData = TC.FAIL;
         UpdateResult.FailDescription = arg30.getMessage();
         UpdateResult.UpdateStatus();
         System.out.println("***********************************************************************************************************************");
         System.out.println("***********************************************************************************************************************");
         arg30.printStackTrace();
         return TC.FAIL;
      }
   }

   public static String Sync() throws InterruptedException, IOException {
      try {
         TC.InputData = "100";
         Thread.sleep(1000L);
         getORObject("Image(BusyWheel)");
         Logs.Ulog("Waiting for load page form busy- Waiting for form busy not exist");
         OverWheelSync();
      } catch (NoSuchElementException arg0) {
         SetDefaultSyncTime();
         return TC.PASS;
      }

      SetDefaultSyncTime();
      return TC.PASS;
   }

   public static String ScrollElementPageDown() throws IOException, InterruptedException {
      try {
         WebElement e = TORObj();
         int ST = Integer.parseInt(TORObj().getAttribute("scrollTop"));

         for(int i = 0; i <= ST; ++i) {
            TORObj().sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            Thread.sleep(200L);
         }

         return UpdateResult.Done();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String ScrollElementClick() throws IOException, InterruptedException {
      try {
         int e = Integer.parseInt(TORObj().getAttribute("scrollTop"));

         for(int i = 0; i <= e; ++i) {
            TORObj().sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            Thread.sleep(100L);
         }

         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String select() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");
      TC.InputData = TC.InputData.replace(".0", "");
      TC.InputData = TC.InputData.replaceAll(" ", "");

      try {
         WebElement e = TORObj();
         Select droplist;
         int i;
         String s1;
         if(!TC.InputData.equals("RANDOM")) {
            droplist = new Select(e);
            droplist.getOptions().toArray();

            for(i = 1; i < droplist.getOptions().size(); ++i) {
               s1 = ((WebElement)droplist.getOptions().get(i)).getText().toString().replaceAll("[^\\p{ASCII}]", "").replaceAll(" ", "");
               if(TC.InputData.replaceAll("[^\\p{ASCII}]", "").replaceAll(" ", "").equals(s1)) {
                  ((WebElement)droplist.getOptions().get(i)).click();
                  Thread.sleep(200L);
                  UpdateResult.ActualData = droplist.getFirstSelectedOption().getText();
                  TC.ExpectedData = droplist.getFirstSelectedOption().getText();
                  return UpdateResult.UpdateStatus();
               }
            }
         }

         if(TC.InputData.equals("RANDOM")) {
            droplist = new Select(e);

            for(i = 0; i < droplist.getOptions().size(); ++i) {
               s1 = ((WebElement)droplist.getOptions().get(i)).getText();
               if(!s1.equals("")) {
                  ((WebElement)droplist.getOptions().get(i)).click();
                  Thread.sleep(200L);
                  UpdateResult.ActualData = droplist.getFirstSelectedOption().getText();
                  TC.ExpectedData = droplist.getFirstSelectedOption().getText();
                  Sync();
                  return UpdateResult.UpdateStatus();
               }
            }
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String selectbyIndex() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         WebElement e = TORObj();
         Select droplist = new Select(e);

         for(int i = 0; i < droplist.getOptions().size(); ++i) {
            TC.InputData = WebServices.Round(TC.InputData);
            int sl = Integer.parseInt(TC.InputData);
            if(sl == i) {
               ((WebElement)droplist.getOptions().get(i)).click();
               Thread.sleep(200L);
               UpdateResult.ActualData = droplist.getFirstSelectedOption().getText();
               TC.ExpectedData = droplist.getFirstSelectedOption().getText();
               return UpdateResult.UpdateStatus();
            }
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String ifListItemexist() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         String e = "false";
         WebElement Ele = TORObj();
         Select droplist = new Select(Ele);

         for(int i = 0; i < droplist.getOptions().size(); ++i) {
            if(((WebElement)droplist.getOptions().get(i)).getText().toString().equalsIgnoreCase(TC.ExpectedData)) {
               e = "true";
               return e;
            }
         }

         return e;
      } catch (Throwable arg3) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String ifListItemNotExist() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         String e = "true";
         WebElement Ele = TORObj();
         ReSetSyncTime();
         Select droplist = new Select(Ele);

         for(int i = 0; i < droplist.getOptions().size(); ++i) {
            if(((WebElement)droplist.getOptions().get(i)).getText().toString().equalsIgnoreCase(TC.ExpectedData)) {
               e = "false";
               return e;
            }
         }

         SetDefaultSyncTime();
         return e;
      } catch (Throwable arg3) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   private static int valueof(String inputData) {
      return 0;
   }

   public static String selectbyIndex_0() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         WebElement e = TORObj();
         Select droplist = new Select(e);
         ((WebElement)droplist.getOptions().get(0)).click();
         UpdateResult.ActualData = "Selection Clear";
         TC.ExpectedData = "Selection Clear";
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static boolean isEquals(String one, String two) {
      HashSet temp = new HashSet();
      temp.add(one);
      temp.add(two);
      boolean t = temp.size() == 1;
      return temp.size() == 1;
   }

   public static String SelectList() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         WebElement e = TORObj();
         if(!TC.InputData.equals("Random")) {
            Select droplist = new Select(e);
            droplist.selectByVisibleText(TC.InputData);
            Thread.sleep(200L);
            UpdateResult.ActualData = droplist.getFirstSelectedOption().getText();
            TC.ExpectedData = TC.InputData;
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String SelectListBox() throws InterruptedException, IOException {
      WebElement select = TORObj();
      Select dropDown = new Select(select);
      String selected = dropDown.getFirstSelectedOption().getText();
      if(selected.equals(TC.InputData)) {
         List Options = dropDown.getOptions();
         Iterator arg4 = Options.iterator();

         while(arg4.hasNext()) {
            WebElement option = (WebElement)arg4.next();
            if(option.getText().equals(TC.InputData)) {
               option.click();
            }
         }
      }

      return TC.PASS;
   }

   public static String SwitchToBrowser_Window_Tab() throws IOException, InterruptedException {
      Logs.Ulog("Switching new window" + TC.InputData);

      try {
         Set e = driver.getWindowHandles();
         Iterator it = e.iterator();

         for(int WID = 1; WID <= e.size(); ++WID) {
            String[] a = TC.InputData.split("Tab");
            int Tno = Integer.parseInt(a[1]);
            String TabID = (String)it.next();
            if(Tno == WID) {
               driver.switchTo().window(TabID);
            }
         }

         Logs.Ulog("Successfully Switched to new window" + TC.InputData);
         return UpdateResult.Done();
      } catch (Throwable arg5) {
         UpdateResult.ActualData = TC.FAIL;
         UpdateResult.FailDescription = arg5.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String SwitchToBrowser_Window_ByTitle() throws IOException, InterruptedException {
      Logs.Ulog("Switch To Browser Window By Title" + TC.InputData);

      try {
         String e = "";
         Set WinID = driver.getWindowHandles();
         Iterator it = WinID.iterator();

         for(int WID = 1; WID <= WinID.size(); ++WID) {
            if(driver.getTitle().equals(TC.InputData.toString())) {
               return e;
            }

            driver.switchTo().window((String)it.next());
         }

         Logs.Ulog("Successfully Switched to new window" + TC.InputData);
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         UpdateResult.ActualData = arg3.getMessage();
         UpdateResult.FailDescription = arg3.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static void SwitchToBrowser_Window_TabNonExp() throws IOException, InterruptedException {
      Logs.Ulog("Switching new window" + TC.InputData);

      try {
         Set WinID = driver.getWindowHandles();
         Iterator it = WinID.iterator();

         for(int WID = 1; WID <= WinID.size(); ++WID) {
            String[] a = TC.InputData.split("Tab");
            int Tno = Integer.parseInt(a[1]);
            String TabID = (String)it.next();
            if(Tno == WID) {
               driver.switchTo().window(TabID);
            }
         }

         Logs.Ulog("Successfully Switched to new window" + TC.InputData);
      } catch (Throwable arg5) {
         ;
      }

   }

   public static String SyncForElementVisibility() throws IOException, InterruptedException {
      Logs.Ulog("Waiting for an element to be visible");
      int start = 0;
      int time = (int)Double.parseDouble(TC.InputData);

      try {
         while(time == start && WebElementsTORObj().size() == 0) {
            Thread.sleep(1000L);
            ++start;
         }
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }

      return TC.PASS;
   }

   public static String UnCheckCheckBox() throws IOException, InterruptedException {
      Logs.Ulog("Unchecking checkBox");

      try {
         WebElement e = TORObj();
         String checked = e.getAttribute("checked");
         if(checked != null) {
            e.click();
         }

         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String selectbyVisibleText() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         WebElement e = TORObj();
         Select droplist = new Select(e);
         droplist.selectByVisibleText(TC.InputData);
         UpdateResult.ActualData = "Selection Clear";
         TC.ExpectedData = "Selection Clear";
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String VerifyAlertPresent() throws InterruptedException, IOException {
      try {
         Alert ex = driver.switchTo().alert();
         UpdateResult.ActualData = ex.getText();
         ex.accept();
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (NoAlertPresentException arg0) {
         Logs.Ulog("Alert not present" + arg0.getMessage());
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyAllListElements() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the selection of the list");

      try {
         WebElement e = TORObj();
         Logs.Ulog("List options " + e.getText());
         List droplist_cotents = e.findElements(By.tagName("li"));
         String temp = TC.InputData;
         String[] allElements = temp.split(",");
         if(allElements.length != droplist_cotents.size()) {
            Logs.Ulog("size of lists do not match");
            UpdateResult.ActualData = Integer.toString(allElements.length);
            TC.ExpectedData = Integer.toString(droplist_cotents.size());
            return UpdateResult.UpdateStatus();
         }

         byte i = 0;
         if(i < droplist_cotents.size()) {
            if(!allElements[i].trim().equals(((WebElement)droplist_cotents.get(i)).getText().trim())) {
               UpdateResult.ActualData = "- Element not found - " + allElements[i].trim();
               TC.ExpectedData = ((WebElement)droplist_cotents.get(i)).getText();
               Logs.Ulog("- Element not found -");
               return UpdateResult.UpdateStatus();
            }

            UpdateResult.ActualData = allElements[i];
            TC.ExpectedData = ((WebElement)droplist_cotents.get(i)).getText();
            Logs.Ulog("- Element found -");
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg4) {
         Logs.Ulog(" - Could not select from list. " + arg4.getMessage());
         return CatchStatementWebElement(arg4.getMessage());
      }

      return TC.PASS;
   }

   public static String VerifyAttributeVal() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyAttributeVal");

      try {
         UpdateResult.ActualData = TORObj().getAttribute("value");
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyAttribute_Boolean() throws IOException, InterruptedException {
      Logs.Ulog(" Executing VerifyAttributeBoolen ");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" Verify element disabled==" + driver.executeScript("return arguments[0]." + TC.InputData, new Object[]{e}));
         boolean istrue = ((Boolean)driver.executeScript("return arguments[0]." + TC.InputData, new Object[]{e})).booleanValue();
         if(istrue) {
            UpdateResult.ActualData = "true";
         } else {
            UpdateResult.ActualData = "false";
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String VerifyAttributeNumber() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyAttributeVal");

      try {
         UpdateResult.ActualData = TORObj().getAttribute(TC.InputData);
         TC.ExpectedData = TC.ExpectedData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static void UploadFileWindows() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing UploadFileAutoIt " + TC.InputData);
         Logs.Ulog("Text Control: " + TC.ExpectedData);
         Thread.sleep(3000L);
         if(R_Start.StoreTable.get("Execute ON Browser").toString().equalsIgnoreCase("Mozilla")) {
            R_Start.Window.ControlSetText("File Upload", TC.ControlText, TC.ControlID, TC.InputData);
            Thread.sleep(3000L);
            R_Start.Window.controlClick("File Upload", TC.ControlText, TC.ControlID);
         } else {
            R_Start.Window.ControlSetText("Open", TC.ControlText, TC.ControlID, TC.InputData);
            Thread.sleep(3000L);
            R_Start.Window.controlClick("Open", TC.ControlText, TC.ControlID);
         }
      } catch (Throwable arg0) {
         CatchStatementWebElement(arg0.getMessage());
      }

   }

   public static String OpenWinApp() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing OpenWinApp ");
         if(R_Start.WinScreen == null) {
            R_Start.WinScreen = new Screen();
         }

         if(R_Start.Window == null) {
            R_Start.Window = new AutoItX();
         }

         R_Start.Window.run(TC.InputData);
         Thread.sleep(3000L);
         UpdateResult.ActualData = String.valueOf(R_Start.Window.winExists(TC.Param1));
         TC.ExpectedData = "true";
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String InputTextWinControl() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing InputTextWinControl " + TC.InputData);
         String e = "WinTitleMatchMode";
         String[] v1;
         String SendString;
         if(TC.InputData.startsWith("RANDOMCONST+")) {
            if(RANDOMCONST == null) {
               GenerateRANDOMCONST();
            }

            v1 = TC.InputData.split("\\+");
            SendString = RANDOMCONST + v1[1];
            RANDOMCONSTPlusStoreval1 = SendString;
            R_Start.Window.ControlSetText(TC.WinTitle, TC.ControlText, TC.ControlID, RANDOMCONSTPlusStoreval1);
            UpdateResult.ActualData = R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID);
            TC.ExpectedData = SendString;
            Logs.Ulog("InputText on obj Done ");
         } else if(TC.InputData.startsWith("SEND_")) {
            v1 = TC.InputData.split("\\_");
            SendString = v1[1];
            R_Start.Window.controlSend(TC.WinTitle, TC.ControlText, TC.ControlID, SendString);
            UpdateResult.ActualData = R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID);
            TC.ExpectedData = SendString;
            Logs.Ulog("InputText on obj Done ");
         } else {
            String v11 = TC.InputData;
            switch(TC.InputData.hashCode()) {
            case -1884956477:
               if(v11.equals("RANDOM")) {
                  R_Start.Window.ControlSetText(TC.WinTitle, TC.ControlText, TC.ControlID, GenerateRandomStringWithDate());
                  RANDOMStoreval1 = GenerateRandomStringWithDate();
                  UpdateResult.ActualData = RANDOMStoreval1;
                  TC.ExpectedData = RANDOMStoreval1;
                  Logs.Ulog("InputText on obj Done ");
                  break;
               }
            default:
               R_Start.Window.ControlSetText(TC.WinTitle, TC.ControlText, TC.ControlID, TC.InputData);
               UpdateResult.ActualData = R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID);
               TC.ExpectedData = TC.InputData;
               UpdateResult.ActualData = R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID);
               TC.ExpectedData = TC.InputData;
               Logs.Ulog("InputText on obj Done ");
            }
         }

         R_Start.Window.ControlSetText(TC.WinTitle, TC.ControlText, TC.ControlID, TC.InputData);
         UpdateResult.ActualData = R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String WindowClose() throws InterruptedException, IOException {
      try {
         if(R_Start.Window == null) {
            R_Start.Window = new AutoItX();
         }

         Logs.Ulog(" Executing WindowClose  ");
         String e = "WinTitleMatchMode";
         R_Start.Window.winClose(TC.WinTitle);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String StoreWinControlText() throws InterruptedException, IOException {
      try {
         if(R_Start.Window == null) {
            R_Start.Window = new AutoItX();
         }

         Logs.Ulog(" Executing WindowClose  ");
         String e = "WinTitleMatchMode";
         R_Start.StoreTable.put(TC.InputData, R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID));
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SelectWinControl() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing InputTextWinControl " + TC.InputData);
         String e = "WinTitleMatchMode";
         R_Start.Window.ControlSetText(TC.WinTitle, TC.ControlText, TC.ControlID, "Add All Partitions");
         R_Start.Window.ControlSetText(TC.WinTitle, TC.ControlText, "[CLASS:TADBLookupCombo; INSTANCE:5]", "Add All Partitions");
         UpdateResult.ActualData = R_Start.Window.controlGetText(TC.WinTitle, TC.ControlText, TC.ControlID);
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String ClickWinControl() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing ClickWinControl ");
         R_Start.Window.controlClick(TC.WinTitle, TC.ControlText, TC.ControlID);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static void ClickScreenifexist() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing ClickScreen ");
         if(R_Start.WinScreen == null) {
            R_Start.WinScreen = new Screen();
         }

         if(R_Start.WinScreen.exists(TC.TestDataPath + TC.InputData) != null) {
            R_Start.WinScreen.click(TC.TestDataPath + TC.InputData);
         }
      } catch (Throwable arg0) {
         CatchStatementWebElement(arg0.getMessage());
      }

   }

   public static void ClickScreen() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing ClickScreen ");
         R_Start.WinScreen.click(TC.InputData);
      } catch (Throwable arg0) {
         CatchStatementWebElement(arg0.getMessage());
      }

   }

   public static void WinWait() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing ClickAutoIT ");
         if(R_Start.Window == null) {
            R_Start.Window = new AutoItX();
         }

         int e = (int)Double.parseDouble(TC.InputData);
         R_Start.Window.winWait(TC.WinTitle, TC.ControlText, e);
      } catch (Throwable arg0) {
         CatchStatementWebElement(arg0.getMessage());
      }

   }

   public static void WinWaitControl() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing ClickAutoIT ");
         if(R_Start.Window == null) {
            R_Start.Window = new AutoItX();
         }

         byte e = 1;

         while(R_Start.Window.controlClick(TC.WinTitle, TC.ControlText, TC.ControlID)) {
            int x = (int)Double.parseDouble(TC.InputData);
            if(e == x) {
               break;
            }

            Thread.sleep(1000L);
         }
      } catch (Throwable arg1) {
         CatchStatementWebElement(arg1.getMessage());
      }

   }

   public static String VerifyAttributeValWebElements() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyAttributeValWebElements ");

      try {
         List e = WebElementsTORObj();
         String found = "NO";

         for(int i = 0; i <= e.size(); ++i) {
            if(((WebElement)e.get(i)).getAttribute("value").equals(TC.InputData)) {
               found = "YES";
               UpdateResult.ActualData = ((WebElement)e.get(i)).getAttribute("value");
               TC.ExpectedData = TC.InputData;
               return UpdateResult.UpdateStatus();
            }
         }

         if(found.equals("NO")) {
            UpdateResult.ActualData = "Text Not found";
            TC.ExpectedData = TC.InputData;
            Logs.Ulog("Verifying the text VerifyAttributeValWebElements failed ");
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyAttributeRANDOMValWebElements() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyAttributeValWebElements ");

      try {
         List e = WebElementsTORObj();
         String found = "NO";

         for(int i = 0; i <= e.size(); ++i) {
            if(((WebElement)e.get(i)).getAttribute("value").equals(Storeval1)) {
               found = "YES";
               UpdateResult.ActualData = ((WebElement)e.get(i)).getAttribute("value");
               TC.ExpectedData = Storeval1;
               return UpdateResult.UpdateStatus();
            }
         }

         if(found.equals("NO")) {
            UpdateResult.ActualData = "Text Not found";
            TC.ExpectedData = Storeval1;
            Logs.Ulog("Verifying the text VerifyAttributeValWebElements failed ");
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyCheckBox_Checked_UnChecked() throws IOException, InterruptedException {
      Logs.Ulog("Verifying checkbox selected");

      try {
         UpdateResult.ActualData = TORObj().getAttribute("checked");
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyCheckboxsSelectedByIndex() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyCheckboxsSelectedByIndex ");

      try {
         List e = WebElementsTORObj();
         int index = (int)Double.parseDouble(TC.InputData);
         UpdateResult.ActualData = String.valueOf(((WebElement)e.get(index)).isSelected());
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String verifyInputBoxText() throws IOException, InterruptedException {
      Logs.Ulog("Verifying Object Text");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getAttribute("value");
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String verifyListSelection() throws IOException, InterruptedException {
      Logs.Ulog("Verifying all the list elements");

      try {
         String e = TC.InputData;
         WebElement droplist = TORObj();
         List droplist_cotents = droplist.findElements(By.tagName("option"));
         String actualVal = null;

         for(int i = 0; i < droplist_cotents.size(); ++i) {
            String selected_status = ((WebElement)droplist_cotents.get(i)).getAttribute("selected");
            if(selected_status != null) {
               actualVal = ((WebElement)droplist_cotents.get(i)).getText();
            }

            UpdateResult.ActualData = actualVal;
         }

         if(!actualVal.equals(e)) {
            UpdateResult.ActualData = actualVal;
            TC.ExpectedData = TC.InputData;
            UpdateResult.UpdateStatus();
            Logs.Ulog(TC.FAIL + "Value not in list - " + e);
            return TC.FAIL;
         }
      } catch (Throwable arg5) {
         return CatchStatementWebElement(arg5.getMessage());
      }

      TC.ExpectedData = TC.InputData;
      UpdateResult.UpdateStatus();
      return TC.PASS;
   }

   public static String VerifyObjectCountGreater() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count VerifyObjectCountGreater ");

      try {
         int e = StoreNum1 + Integer.parseInt(TC.InputData.replace(".0", ""));
         UpdateResult.ActualData = String.valueOf(e);
         TC.ExpectedData = String.valueOf(StoreNum2);
         StoreNum1 = 0;
         StoreNum2 = 0;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         StoreNum1 = 0;
         StoreNum2 = 0;
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyObjectCountLess() throws IOException, InterruptedException {
      Logs.Ulog("Get Object count VerifyObjectCountLess");

      try {
         int e = StoreNum1 - Integer.parseInt(TC.InputData);
         UpdateResult.ActualData = String.valueOf(e);
         TC.ExpectedData = String.valueOf(StoreNum2);
         StoreNum1 = 0;
         StoreNum2 = 0;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         StoreNum1 = 0;
         StoreNum2 = 0;
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyObjectPostionChange() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEle");

      try {
         if(StoreNum1 != StoreNum3) {
            UpdateResult.ActualData = "Position changed";
            TC.ExpectedData = "Position changed";
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = StoreNum1 + "Position not changed";
            TC.ExpectedData = StoreNum3 + "Position changed";
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RestoreDB() throws SQLException {
      if(Db == null) {
         Db = new Database();
      }

      Database.RestoreDB();
      return TC.PASS;
   }

   public static String ExecuteSQLStatement() throws SQLException {
      if(Db == null) {
         Db = new Database();
      }

      Database.ExecuteSQL();
      return TC.PASS;
   }

   public static String VerifyObjectPostionNotChange() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEle");

      try {
         UpdateResult.ActualData = String.valueOf(StoreNum1);
         TC.ExpectedData = String.valueOf(StoreNum3);
         UpdateResult.UpdateStatus();
         UpdateResult.ActualData = String.valueOf(StoreNum2);
         TC.ExpectedData = String.valueOf(StoreNum4);
         StoreNum1 = 0;
         StoreNum2 = 0;
         StoreNum3 = 0;
         StoreNum4 = 0;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         StoreNum1 = 0;
         StoreNum2 = 0;
         StoreNum3 = 0;
         StoreNum4 = 0;
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String verifyRadioSelected() throws IOException, InterruptedException {
      Logs.Ulog("Verify Radio button is selected");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getAttribute("checked");
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyText() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getText();
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyInnertext() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerText", new Object[]{e});
         TC.ExpectedData = TC.InputData;
         TC.PassDescription = "Inner text is Matching ";
         TC.FailDescription = "Inner text is not Matching  ";
         UpdateDescription("Verify text of Object " + TC.TestObjects);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyInnertextContains() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyInnertextContains");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerText", new Object[]{e});
         if(UpdateResult.ActualData.contains(TC.InputData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " Innertext not Contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyTextContains() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text contains...");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getText();
         if(UpdateResult.ActualData.contains(TC.InputData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " Innertext not Contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyInnerhtmlContains() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyInnerhtml");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerHTML", new Object[]{e});
         if(UpdateResult.ActualData.contains(TC.InputData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " Innertext not Contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyInnertextTrim() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerText", new Object[]{e});
         UpdateResult.ActualData = UpdateResult.ActualData.replaceAll("[^a-zA-Z0-9]+", "").replaceAll(" ", "");
         TC.ExpectedData = TC.InputData.replaceAll("[^a-zA-Z0-9]+", "").replaceAll(" ", "");
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyInnertextRemoveCarNew() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerText", new Object[]{e});
         UpdateResult.ActualData = UpdateResult.ActualData.replaceAll("\\r\\n|\\r|\\n", "");
         TC.ExpectedData = TC.InputData.replaceAll("\\r\\n|\\r|\\n", "");
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyInnerhtml() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyInnerhtml");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerHTML", new Object[]{e});
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyTitle() throws IOException, InterruptedException {
      Logs.Ulog("Verifying title");

      try {
         UpdateResult.ActualData = driver.getTitle();
         TC.ExpectedData = TC.InputData;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyWebElmsAttrVal_InAlphaOrder() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyCheckboxsSelectedByIndex ");

      try {
         List e = WebElementsTORObj();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;

         for(int i = 0; i < e.size(); ++i) {
            if(((WebElement)e.get(i)).getAttribute(TC.InputData).compareTo(((WebElement)e.get(i + 1)).getAttribute(TC.InputData)) >= 0) {
               UpdateResult.ActualData = TC.FAIL;
            }
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String Wait() throws InterruptedException {
      try {
         Logs.Ulog("Pausing the Execution for " + TC.InputData);
         String e = "Test_" + TC.InputData;
         String[] a = e.split("_");
         int x = (int)Double.parseDouble(TC.InputData);
         TimeUnit.SECONDS.sleep((long)x);
         UpdateDescription("Wait for  " + TC.ExpectedData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         Logs.Ulog("Error while pausing the execution  " + TC.InputData + " " + arg2.getMessage());
         return TC.FAIL;
      }
   }

   public static String Wait_Min() throws InterruptedException {
      try {
         Logs.Ulog("Pausing the Execution for " + TC.InputData);
         String e = "Test_" + TC.InputData;
         String[] a = e.split("_");
         int x = (int)Double.parseDouble(TC.InputData);
         TimeUnit.MINUTES.sleep((long)x);
         UpdateDescription("Wait for  " + TC.ExpectedData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         Logs.Ulog("Error while pausing the execution  " + TC.InputData + " " + arg2.getMessage());
         return TC.FAIL;
      }
   }

   public static String Sleep() throws InterruptedException {
      try {
         Logs.Ulog("Pausing the Execution for " + TC.InputData);
         String e = "Test_" + TC.InputData;
         String[] a = e.split("_");
         int x = (int)Double.parseDouble(TC.InputData);
         TimeUnit.SECONDS.sleep((long)x);
         UpdateDescription("Wait for  " + TC.ExpectedData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         Logs.Ulog("Error while pausing the execution  " + TC.InputData + " " + arg2.getMessage());
         return TC.FAIL;
      }
   }

   private static WebElement WebeleFluentSync() {
      FluentWait wait = (new FluentWait(driver)).withTimeout(30L, TimeUnit.SECONDS).pollingEvery(500L, TimeUnit.MILLISECONDS).ignoring(NoSuchElementException.class);
      return (WebElement)wait.until(new 1());
   }

   public static String ClickElementsByRefAndVerify() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text ClickElementsByRef ");

      try {
         List e = WebElementsTORObj();
         getORObject(TC.Param1);
         List EleCollectionRef = WebElementsTORObj();
         String found = "NO";

         for(int i = 0; i <= e.size(); ++i) {
            if(((WebElement)e.get(i)).getAttribute(TC.InputData).equals(TC.ExpectedData)) {
               found = "YES";
               ((WebElement)EleCollectionRef.get(i)).click();
               UpdateResult.ActualData = TC.PASS;
               TC.ExpectedData = TC.PASS;
               return UpdateResult.UpdateStatus();
            }
         }

         if(found.equals("NO")) {
            UpdateResult.ActualData = "Text Not found";
            TC.ExpectedData = TC.InputData;
            Logs.Ulog("Verifying the text ClickElementsByRef failed ");
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String ClickElementsByRef() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text ClickElementsByRef ");

      try {
         List e = WebElementsTORObj();
         getORObject(TC.Param1);
         List EleCollectionRef = WebElementsTORObj();
         String found = "NO";

         for(int i = 0; i <= e.size(); ++i) {
            if(((WebElement)e.get(i)).getAttribute(TC.ExpectedData).equals(TC.Param2)) {
               found = "YES";
               ((WebElement)EleCollectionRef.get(i)).click();
               UpdateResult.ActualData = TC.PASS;
               TC.ExpectedData = TC.PASS;
               return UpdateResult.UpdateStatus();
            }
         }

         if(found.equals("NO")) {
            UpdateResult.ActualData = TC.Param2 + "Text Not found";
            TC.ExpectedData = TC.Param2 + "Text Not found";
            Logs.Ulog("Verifying the text ClickElementsByRef failed ");
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String TempLogin() throws InterruptedException, AWTException, IOException {
      if(ReusableFunctions.ReuseTableData.get("D_URL").equals("http://localhost:8080/timetrax-web/timetraxApp/#/timetraxApp")) {
         Thread.sleep(1000L);
         RMouse.mousePress(0);
         RMouse.keyPress(84);
         RMouse.keyPress(73);
         RMouse.keyPress(77);
         RMouse.keyPress(69);
         RMouse.keyPress(84);
         RMouse.keyPress(82);
         RMouse.keyPress(65);
         RMouse.keyPress(88);
         RMouse.keyPress(9);
         Thread.sleep(1000L);
         RMouse.keyPress(84);
         RMouse.keyPress(73);
         RMouse.keyPress(77);
         RMouse.keyPress(69);
         RMouse.keyPress(84);
         RMouse.keyPress(82);
         RMouse.keyPress(65);
         RMouse.keyPress(88);
         Thread.sleep(1000L);
         RMouse.keyPress(9);

         try {
            ReSetSyncTime();
            driver.findElement(By.xpath("//div[@class=\'loginSubmitButton fontBold\']")).click();
            SetDefaultSyncTime();
         } catch (Throwable arg0) {
            RMouse.keyPress(10);
            SetDefaultSyncTime();
            return TC.PASS;
         }

         SetDefaultSyncTime();
         return UpdateResult.Done();
      } else {
         Thread.sleep(1000L);
         RMouse.mousePress(0);
         RMouse.keyPress(84);
         RMouse.keyPress(73);
         RMouse.keyPress(77);
         RMouse.keyPress(69);
         RMouse.keyPress(84);
         RMouse.keyPress(82);
         RMouse.keyPress(65);
         RMouse.keyPress(88);
         RMouse.keyPress(49);
         RMouse.keyPress(9);
         Thread.sleep(1000L);
         RMouse.keyPress(84);
         RMouse.keyPress(73);
         RMouse.keyPress(77);
         RMouse.keyPress(69);
         RMouse.keyPress(16);
         RMouse.keyPress(49);
         RMouse.keyRelease(16);
         RMouse.keyPress(84);
         RMouse.keyPress(82);
         RMouse.keyPress(65);
         RMouse.keyPress(88);
         RMouse.keyPress(49);
         Thread.sleep(1000L);
         RMouse.keyPress(9);

         try {
            ReSetSyncTime();
            driver.findElement(By.xpath("//div[@class=\'loginSubmitButton fontBold\']")).click();
            SetDefaultSyncTime();
         } catch (Throwable arg1) {
            RMouse.keyPress(10);
            return TC.PASS;
         }

         return UpdateResult.Done();
      }
   }

   public static String KillProcess() throws IOException, InterruptedException {
      try {
         Runtime.getRuntime().exec("TASKKILL /F /IM IEDriverServer.exe");
         Thread.sleep(200L);
         Runtime.getRuntime().exec("TASKKILL /F /IM chromedriver.exe");
         Thread.sleep(200L);
         Runtime.getRuntime().exec("TASKKILL /F /IM Safari.exe");
         Runtime.getRuntime().exec("TASKKILL /F /IM firefox.exe");
         Runtime.getRuntime().exec("TASKKILL /F /IM chrome.exe");
         Thread.sleep(200L);
         Logs.Ulog("Pocess Killed");
         return TC.PASS;
      } catch (Throwable arg0) {
         return TC.PASS;
      }
   }

   public static String MouseRelease() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Mouse Release");
         Actions t = new Actions(driver);
         t.release();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String MouseReleaseBuiler() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Mouse Release");
         driver.manage().timeouts().implicitlyWait(0L, TimeUnit.SECONDS);
         driver.switchTo().defaultContent();
         Actions t = new Actions(driver);
         Action dragAndDrop = t.clickAndHold(TORObj()).build();
         dragAndDrop.perform();
         getORObject("Page(Content).LeftTree(Image)");
         driver.switchTo().frame("cq-cf-frame");
         getORObject("Dialog(\"EditComponent\").Image(\"Drop an Image\")");
         dragAndDrop = t.moveToElement(TORObj()).release().build();
         dragAndDrop.perform();
         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String StartJboss() throws IOException, InterruptedException {
      try {
         Logs.Ulog("---- Start  Jboss----");
         File t = new File((String)R_Start.StoreTable.get("JbossServerLog"));
         t.delete();
         t.createNewFile();
         Process p = Runtime.getRuntime().exec("cmd.exe /C start " + R_Start.StoreTable.get("JbossPath"));
         int JbossStartTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("JbossStartTime"));
         TimeUnit.SECONDS.sleep((long)JbossStartTime);
         CheckForJbossStart();
         return TC.PASS;
      } catch (Throwable arg2) {
         Logs.Ulog("ERROR ----- Start J boss Not Successfull - check if JBOSS is closed  -------  " + arg2.getMessage());
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String CheckForJbossStart() throws IOException, InterruptedException {
      try {
         boolean t = false;
         FileReader JbossFail = new FileReader((String)R_Start.StoreTable.get("JbossServerLog"));
         Scanner p2 = new Scanner(JbossFail);

         while(p2.hasNextLine()) {
            String JbossFail1 = p2.nextLine();
            if(JbossFail1.matches((String)R_Start.StoreTable.get("JbossStartMsg"))) {
               Logs.Ulog("---- SOUNDS GOOD JBOSS STARTED ----");
               System.out.println("---- SOUNDS GOOD JBOSS STARTED ----");
               t = true;
               return UpdateResult.Done();
            }
         }

         if(!t && R_Start.StoreTable.get("FailStatement1SendMailGmail").toString().equalsIgnoreCase("Yes")) {
            new FailStatement1GmailSendMail();
            FailStatement1GmailSendMail.WriteEmail();
            Process p1 = Runtime.getRuntime().exec("cmd.exe /C start C:/Fail1SendMail.vbs");
            Runtime.getRuntime().exit(0);
            return TC.FAIL;
         } else {
            return TC.PASS;
         }
      } catch (Throwable arg4) {
         Logs.Ulog("ERROR ----- Start J boss Not Successfull - check if JBOSS is closed  -------  " + arg4.getMessage());
         if(R_Start.StoreTable.get("FailStatement1SendMailGmail").toString().equalsIgnoreCase("Yes")) {
            new FailStatement1GmailSendMail();
            FailStatement1GmailSendMail.WriteEmail();
            Process p = Runtime.getRuntime().exec("cmd.exe /C start C:/Fail1SendMail.vbs");
            Runtime.getRuntime().exit(0);
            return TC.FAIL;
         } else {
            return CatchStatementWebElement(arg4.getMessage());
         }
      }
   }

   public static String CheckForJbossStart_old() throws IOException, InterruptedException {
      try {
         Logs.Ulog("---- Start  CheckForJbossStart ----");
         BufferedReader t = new BufferedReader(new FileReader((String)R_Start.StoreTable.get("JbossServerLog")));
         Object line = null;
         int count = 0;

         while(t.readLine() != null) {
            if(t.readLine().toString().toLowerCase().contains("started in") | t.readLine().contains("- Started")) {
               Logs.Ulog("---- SOUNDS GOOD JBOSS STARTED ----");
               break;
            }

            ++count;
            if(count > 2000) {
               break;
            }
         }

         return TC.PASS;
      } catch (Throwable arg2) {
         Logs.Ulog("ERROR ----- Start J boss Not Successfull - check if JBOSS is closed  -------  " + arg2.getMessage());
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String BUILDTimeTrax() throws IOException, InterruptedException {
      try {
         Logs.Ulog("---- Start  BUILDTimeTrax  ----");
         File t = new File((String)R_Start.StoreTable.get("BuildLogPath"));
         t.delete();
         t.createNewFile();
         Process BuildFail = Runtime.getRuntime().exec("cmd.exe /C start " + R_Start.StoreTable.get("BuildPath"));
         int BuildTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("BuildTime"));
         TimeUnit.SECONDS.sleep((long)BuildTime);
         Logs.Ulog("---- Executed build file ----");
         boolean BuildSuccess = false;
         FileReader fin = new FileReader((String)R_Start.StoreTable.get("BuildLogPath"));
         Scanner scanner = new Scanner(fin);

         while(scanner.hasNextLine()) {
            String BuildFail1 = scanner.nextLine();
            if(BuildFail1.contains((String)R_Start.StoreTable.get("BuildMsg"))) {
               Logs.Ulog("---- SOUNDS GOOD BUILD SUCCESS ----");
               System.out.println("---- SOUNDS GOOD BUILD SUCCESS ----");
               BuildSuccess = true;
               return UpdateResult.Done();
            }
         }

         if(!BuildSuccess && R_Start.StoreTable.get("FailStatement2SendMailGmail").toString().equalsIgnoreCase("Yes")) {
            new FailStatement2GmailSendMail();
            FailStatement2GmailSendMail.WriteEmail();
            BuildFail = Runtime.getRuntime().exec("cmd.exe /C start C:/Fail2SendMail.vbs");
            Runtime.getRuntime().exit(0);
         }

         return TC.PASS;
      } catch (Throwable arg6) {
         Logs.Ulog("ERROR ----- Build Not Successfull - check build log  -------  " + arg6.getMessage());
         if(R_Start.StoreTable.get("FailStatement2SendMailGmail").toString().equalsIgnoreCase("Yes")) {
            new FailStatement2GmailSendMail();
            FailStatement2GmailSendMail.WriteEmail();
            Runtime.getRuntime().exit(0);
         }

         return CatchStatementWebElement(arg6.getMessage());
      }
   }

   public static String MenuOptionSelectMouseOver() throws IOException, InterruptedException {
      Logs.Ulog("Verifying Object Text");

      try {
         WebElement e = TORObj();
         boolean IsObjdisp = false;
         Actions Mouse = new Actions(driver);
         Mouse.moveToElement(e).perform();

         WebElement count;
         try {
            getORObject(TC.Param1);
            count = TORObj();
            count.click();
         } catch (Throwable arg7) {
            Logs.Ulog(TC.Param1 + "Object Not Present");
         }

         try {
            getORObject(TC.Param2);
            count = TORObj();
            IsObjdisp = count.isDisplayed();
         } catch (Throwable arg6) {
            Logs.Ulog(TC.Param2 + "Object Not Present");
         }

         int arg9 = 0;

         while(!IsObjdisp) {
            Logs.Ulog("In While loop");

            WebElement T;
            try {
               getORObject(TC.TestObjects);
               e = TORObj();
               Mouse = new Actions(driver);
               Mouse.moveToElement(e).perform();
               getORObject(TC.Param1);
               T = TORObj();
               T.click();
            } catch (Throwable arg5) {
               Logs.Ulog(TC.Param1 + "Object Not Present");
            }

            Logs.Ulog("Mouse move done - in while loop");

            try {
               getORObject(TC.Param2);
               T = TORObj();
               IsObjdisp = T.isDisplayed();
            } catch (Throwable arg4) {
               Logs.Ulog(TC.Param2 + "Object Not Present");
            }

            if(IsObjdisp) {
               break;
            }

            Thread.sleep(100L);
            ++arg9;
            if(arg9 > 5) {
               break;
            }

            Logs.Ulog("Count " + arg9);
         }

         UpdateResult.ActualData = e.getAttribute("value");
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg8) {
         Logs.Ulog("ERROR---  on Mouse Over= " + arg8.getMessage());
         return UpdateResult.UpdateStatus();
      }
   }

   public static String MenuOptionSelectClickV1() throws IOException, InterruptedException {
      Logs.Ulog("Verifying Object Text");

      try {
         WebElement e = TORObj();
         boolean IsObjdisp = false;
         RoboMouseMoveOnObj();

         WebElement count;
         try {
            getORObject(TC.Param1);
            count = TORObj();
            count.click();
         } catch (Throwable arg6) {
            Logs.Ulog(TC.Param1 + "Object Not Present");
         }

         try {
            getORObject(TC.Param2);
            count = TORObj();
            IsObjdisp = count.isDisplayed();
         } catch (Throwable arg5) {
            Logs.Ulog(TC.Param2 + "Object Not Present");
         }

         int arg8 = 0;

         while(!IsObjdisp) {
            Logs.Ulog("In While loop");

            WebElement T;
            try {
               getORObject(TC.TestObjects);
               e = TORObj();
               RoboMouseMoveOnObj();
               getORObject(TC.Param1);
               T = TORObj();
               T.click();
            } catch (Throwable arg4) {
               Logs.Ulog(TC.Param1 + "Object Not Present");
            }

            Logs.Ulog("Mouse move done - in while loop");

            try {
               getORObject(TC.Param2);
               T = TORObj();
               IsObjdisp = T.isDisplayed();
            } catch (Throwable arg3) {
               Logs.Ulog(TC.Param2 + "Object Not Present");
            }

            if(IsObjdisp) {
               break;
            }

            Thread.sleep(100L);
            ++arg8;
            if(arg8 > 5) {
               break;
            }

            Logs.Ulog("Count " + arg8);
         }

         UpdateResult.ActualData = e.getAttribute("value");
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg7) {
         Logs.Ulog("ERROR---  on Mouse Over= " + arg7.getMessage());
         return UpdateResult.UpdateStatus();
      }
   }

   public static String MenuOptionSelectClick() throws IOException, InterruptedException {
      Logs.Ulog("Verifying Object Text");

      try {
         WebElement e = TORObj();
         RoboMouseMoveOnObj();
         ReSetSyncTime();

         for(int i = 0; i <= 15; ++i) {
            try {
               Thread.sleep(100L);
               getORObject(TC.Param1);
               WebElement Option = NonExceptionTORObj();
               e.click();
               Option.click();
               Thread.sleep(3000L);
               getORObject(TC.Param2);
               WebElement ObjDisp = NonExceptionTORObj();
               if(ObjDisp.isDisplayed()) {
                  SetDefaultSyncTime();
                  break;
               }
            } catch (Throwable arg3) {
               ;
            }
         }

         SetDefaultSyncTime();
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         Sync();
         return UpdateResult.Done();
      } catch (Throwable arg4) {
         SetDefaultSyncTime();
         Logs.Ulog("ERROR---  on Mouse Over= " + arg4.getMessage());
         return UpdateResult.UpdateStatus();
      }
   }

   public static String VerifyDisabled() throws IOException, InterruptedException {
      Logs.Ulog(" Executing InputText ");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" Verify element disabled==" + driver.executeScript("return arguments[0].disabled", new Object[]{e}));
         boolean disabled = ((Boolean)driver.executeScript("return arguments[0].disabled", new Object[]{e})).booleanValue();
         if(disabled) {
            UpdateResult.ActualData = "DISABLED";
            TC.ExpectedData = "DISABLED";
         } else {
            UpdateResult.ActualData = "NOT DISABLED";
            TC.ExpectedData = "DISABLED";
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String VerifyEnabled() throws IOException, InterruptedException {
      Logs.Ulog(" Executing InputText ");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" Verify element disabled==" + driver.executeScript("return arguments[0].disabled", new Object[]{e}));
         boolean disabled = ((Boolean)driver.executeScript("return arguments[0].disabled", new Object[]{e})).booleanValue();
         if(!disabled) {
            UpdateResult.ActualData = "ENABLED";
            TC.ExpectedData = "ENABLED";
         } else {
            UpdateResult.ActualData = "NOT ENABLED";
            TC.ExpectedData = "ENABLED";
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String VerifyAutoFocus_True() throws IOException, InterruptedException {
      Logs.Ulog(" Executing VerifyAutoFocus_True ");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" Verify Attribute autofocus==" + driver.executeScript("return arguments[0].autofocus", new Object[]{e}));
         boolean Autofocous = ((Boolean)driver.executeScript("return arguments[0].autofocus", new Object[]{e})).booleanValue();
         if(Autofocous) {
            UpdateResult.ActualData = "autofocus=TRUE";
            TC.ExpectedData = "autofocus=TRUE";
         } else {
            UpdateResult.ActualData = "NOT autofocus";
            TC.ExpectedData = "autofocus=TRUE";
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String VerifyAutoFocus_False() throws IOException, InterruptedException {
      Logs.Ulog(" Executing InputText ");

      try {
         WebElement e = TORObj();
         Logs.Ulog(" Verify Attribute autofocus==" + driver.executeScript("return arguments[0].autofocus" + TC.InputData, new Object[]{e}));
         boolean autofocus = ((Boolean)driver.executeScript("return arguments[0].autofocus", new Object[]{e})).booleanValue();
         if(!autofocus) {
            UpdateResult.ActualData = "autofocus=FALSE";
            TC.ExpectedData = "autofocus=TRUE";
         } else {
            UpdateResult.ActualData = "autofocus=TRUE";
            TC.ExpectedData = "autofocus=FALSE";
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String SendKeyTab() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         TORObj().sendKeys(new CharSequence[]{Keys.TAB});
         TORObj().sendKeys(new CharSequence[]{Keys.TAB});
         Thread.sleep(200L);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKeyTabRobo() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTabRobo");
         if(RMouse == null) {
            RMouse = new Robot();
         }

         RMouse.keyPress(9);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKeyALT_A() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         RMouse.mousePress(0);
         RMouse.keyPress(18);
         RMouse.keyPress(65);
         Thread.sleep(200L);
         RMouse.keyRelease(18);
         RMouse.keyRelease(65);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKey_CTR_S() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         Robot t = new Robot();
         t.keyPress(17);
         t.keyPress(83);
         Thread.sleep(2000L);
         t.keyRelease(17);
         t.keyRelease(83);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKey_Del() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         Robot t = new Robot();
         t.keyPress(127);
         Thread.sleep(2000L);
         t.keyRelease(127);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKeyCTR_A() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         HighlightElement();
         driver.findElement(By.xpath("//body")).click();
         RMouse.mousePress(0);
         RMouse.keyPress(17);
         RMouse.keyPress(65);
         Thread.sleep(200L);
         RMouse.keyRelease(17);
         RMouse.keyRelease(65);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKeyCTR_W() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         HighlightElement();
         driver.findElement(By.xpath("//body")).click();
         RMouse.mousePress(0);
         RMouse.keyPress(17);
         RMouse.keyPress(87);
         Thread.sleep(200L);
         RMouse.keyRelease(17);
         RMouse.keyRelease(87);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseMoveOnObj() throws IOException, InterruptedException {
      Logs.Ulog("Start of RoboMouseMoveOnObj");

      try {
         RobotMouse_key.MoveMouseToWebEleCoord(TORObj());
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseClickOnObj() throws IOException, InterruptedException {
      Logs.Ulog("Start of RoboMouseClickOnObj");

      try {
         RobotMouse_key.MoveMouseToWebEleCoord(TORObj());
         RobotMouse_key.robotPoweredClick();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseDown() throws IOException, InterruptedException {
      Logs.Ulog("Start of RoboMouseClickOnObj");

      try {
         RobotMouse_key.MoveMouseToWebEleCoord(TORObj());
         RMouse.mousePress(16);
         Thread.sleep(2000L);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseRtClickOnObj() throws IOException, InterruptedException {
      Logs.Ulog("Start of RoboMouseClickOnObj");

      try {
         RobotMouse_key.MoveMouseToWebEleCoord(TORObj());
         RMouse.keyPress(4096);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseRelease() throws IOException, InterruptedException {
      Logs.Ulog("Start of the RoboMouseRelease");

      try {
         RMouse.mouseRelease(16);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseMoveOnPage() throws IOException, InterruptedException {
      Logs.Ulog("Start of RoboMouseMoveOnPage");

      try {
         C_RoboMouse.MoveMouseToCoordOnPg(Integer.parseInt(TC.Param1), Integer.parseInt(TC.Param2));
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RoboMouseMoveOnAbsCord() throws IOException, InterruptedException {
      Logs.Ulog("Start of RoboMouseMoveOnPage");

      try {
         C_RoboMouse.MoveMouseToAbsCoord(Integer.parseInt(TC.Param1), Integer.parseInt(TC.Param2));
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyGetTextRANDOMPlusValWebElements() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyAttributeValWebElements ");

      try {
         List e = WebElementsTORObj();
         String found = "NO";

         for(int i = 0; i < e.size(); ++i) {
            ((WebElement)e.get(i)).sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            if(((WebElement)e.get(i)).getText().toUpperCase().contains(RANDOMCONSTPlusStoreval1.toUpperCase())) {
               found = "YES";
               UpdateResult.ActualData = RANDOMCONSTPlusStoreval1.toUpperCase();
               TC.ExpectedData = RANDOMCONSTPlusStoreval1.toUpperCase();
               return UpdateResult.UpdateStatus();
            }
         }

         if(found.equals("NO")) {
            UpdateResult.ActualData = "Text Not found";
            TC.ExpectedData = RANDOMCONSTPlusStoreval1;
            Logs.Ulog("Verifying the text VerifyAttributeValWebElements failed ");
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyGetTextElementsByRef_scrollDown() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyAttributeValWebElements ");

      try {
         WebElement e = TORObj();
         ReSetSyncTime();

         for(int i = 0; i < 100; ++i) {
            try {
               getORObject(TC.ExpectedData);
               Thread.sleep(500L);
               if(TORObj().isDisplayed()) {
                  UpdateResult.ActualData = TORObj().getText();
                  TC.ExpectedData = TORObj().getText();
                  Logs.Ulog("Verifying the text VerifyGetTextElementsByRef_scroll Passed ");

                  for(int T = 0; T <= i; ++T) {
                     e.sendKeys(new CharSequence[]{Keys.PAGE_UP});
                  }

                  SetDefaultSyncTime();
                  return UpdateResult.UpdateStatus();
               }
            } catch (Throwable arg2) {
               e.sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            }

            SetDefaultSyncTime();
         }

         UpdateResult.ActualData = "Text Not found";
         TC.ExpectedData = TC.InputData;
         Logs.Ulog("Verifying the text VerifyAttributeValWebElements failed ");
         SetDefaultSyncTime();
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         SetDefaultSyncTime();
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String VerifyGetTextRANDOMValWebElements() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text VerifyAttributeValWebElements ");

      try {
         List e = WebElementsTORObj();
         String found = "NO";

         for(int i = 0; i < e.size(); ++i) {
            ((WebElement)e.get(i)).sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            if(((WebElement)e.get(i)).getText().toUpperCase().contains(RANDOMStoreval1.toUpperCase())) {
               found = "YES";
               UpdateResult.ActualData = RANDOMStoreval1.toUpperCase();
               TC.ExpectedData = RANDOMStoreval1.toUpperCase();
               return UpdateResult.UpdateStatus();
            }
         }

         if(found.equals("NO")) {
            UpdateResult.ActualData = "Text Not found";
            TC.ExpectedData = RANDOMStoreval1;
            Logs.Ulog("Verifying the text VerifyAttributeValWebElements failed ");
            return UpdateResult.UpdateStatus();
         } else {
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String SelectSaturday() throws IOException, InterruptedException {
      Logs.Ulog("Selecting Current Saturday of the week");

      try {
         Calendar e = Calendar.getInstance();
         int date = e.get(5);
         int dow = e.get(7);

         WebElement ele;
         for(ele = TORObj(); dow != 7; dow = e.get(7)) {
            e.add(5, 1);
         }

         int saturday = e.get(5);
         int month = e.get(2);
         if(date > saturday) {
            Logs.Ulog("Using Next Month\'s Saturday");
            Select select = new Select(ele.findElement(By.xpath("//select[@class=\'ui-datepicker-month\']")));
            select.selectByIndex(month);
         }

         ele.findElement(By.xpath("//td/a[text()=\'" + saturday + "\']")).click();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg6) {
         return CatchStatementWebElement(arg6.getMessage());
      }
   }

   public static String VerifyTextPDFReports() throws IOException, InterruptedException {
      Logs.Ulog("---- in VerifyPDFReports---");

      try {
         driver.manage().timeouts().implicitlyWait(60L, TimeUnit.SECONDS);
         URL e = new URL(driver.getCurrentUrl());
         Cookie authorizationCookie = driver.manage().getCookieNamed("JSESSIONID");
         URLConnection conn = e.openConnection();
         conn.setRequestProperty("Cookie", authorizationCookie.toString());
         InputStream fileToParse = conn.getInputStream();
         PDFParser parser = new PDFParser((RandomAccessRead)fileToParse);
         parser.parse();
         String[] Aspl = (new PDFTextStripperByArea()).getText(parser.getPDDocument()).toString().split(TC.ExpectedData);
         UpdateResult.ActualData = Aspl[0];
         parser.getPDDocument().close();
         PDDocument pdf = PDDocument.load(fileToParse, System.getProperty("user.dir") + "/src/TestData/" + TC.InputData);
         PDFTextStripperByArea stripper = new PDFTextStripperByArea();
         String DateReplace = (new SimpleDateFormat("M/dd/yy")).format(new Date());
         String[] Spl = stripper.getText(pdf).toString().split(TC.ExpectedData);
         TC.ExpectedData = Spl[0];
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg9) {
         return CatchStatementWebElement(arg9.getMessage());
      }
   }

   public static String VerifyTextPDFReports_DTS() throws IOException, InterruptedException {
      Logs.Ulog("---- in VerifyPDFReports---");

      try {
         driver.manage().timeouts().implicitlyWait(60L, TimeUnit.SECONDS);
         URL e = new URL(driver.getCurrentUrl());
         Cookie authorizationCookie = driver.manage().getCookieNamed("JSESSIONID");
         URLConnection conn = e.openConnection();
         conn.setRequestProperty("Cookie", authorizationCookie.toString());
         InputStream fileToParse = conn.getInputStream();
         PDFParser parser = new PDFParser((RandomAccessRead)fileToParse);
         parser.parse();
         String[] Aspl = (new PDFTextStripperByArea()).getText(parser.getPDDocument()).toString().split(TC.ExpectedData);
         UpdateResult.ActualData = Aspl[0];
         parser.getPDDocument().close();
         PDDocument pdf = PDDocument.load(fileToParse, System.getProperty("user.dir") + "/src/TestData/" + TC.InputData);
         PDFTextStripperByArea stripper = new PDFTextStripperByArea();
         String DateReplace = (new SimpleDateFormat("m/d/yy")).format(new Date());
         String[] Spl = stripper.getText(pdf).toString().split(TC.ExpectedData);
         TC.ExpectedData = Spl[0].replace(TC.Param1, DateReplace);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg9) {
         return CatchStatementWebElement(arg9.getMessage());
      }
   }

   public static String VerifyTextPDFReports_Contains() throws IOException, InterruptedException {
      Logs.Ulog("---- in VerifyPDFReports---");

      try {
         driver.manage().timeouts().implicitlyWait(60L, TimeUnit.SECONDS);
         URL e = new URL(driver.getCurrentUrl());
         Cookie authorizationCookie = driver.manage().getCookieNamed("JSESSIONID");
         URLConnection conn = e.openConnection();
         conn.setRequestProperty("Cookie", authorizationCookie.toString());
         InputStream fileToParse = conn.getInputStream();
         PDFParser parser = new PDFParser((RandomAccessRead)fileToParse);
         parser.parse();
         String ActualPDF = (new PDFTextStripperByArea()).getText(parser.getPDDocument());
         System.out.println(ActualPDF);
         String[] Aspl = (new PDFTextStripperByArea()).getText(parser.getPDDocument()).toString().split(TC.ExpectedData);
         UpdateResult.ActualData = Aspl[0];
         String ExpEntireFileText = (new Scanner(new File(System.getProperty("user.dir") + "/src/TestData/" + TC.InputData))).useDelimiter("\\A").next();
         if(Aspl[0].matches(ExpEntireFileText)) {
            UpdateResult.ActualData = Aspl[0];
            TC.ExpectedData = Aspl[0];
         } else {
            UpdateResult.ActualData = Aspl[0];
            TC.ExpectedData = ExpEntireFileText;
         }

         parser.getPDDocument().close();
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg7) {
         return CatchStatementWebElement(arg7.getMessage());
      }
   }

   public static String VerifyTextPDFReports_WritetoFile() throws IOException, InterruptedException {
      Logs.Ulog("---- in VerifyTextPDFReports_WritetoFile---");

      try {
         driver.manage().timeouts().implicitlyWait(60L, TimeUnit.SECONDS);
         URL e = new URL(driver.getCurrentUrl());
         Cookie authorizationCookie = driver.manage().getCookieNamed("JSESSIONID");
         URLConnection conn = e.openConnection();
         conn.setRequestProperty("Cookie", authorizationCookie.toString());
         InputStream fileToParse = conn.getInputStream();
         PDFParser parser = new PDFParser((RandomAccessRead)fileToParse);
         parser.parse();
         String ActualPDF = (new PDFTextStripperByArea()).getText(parser.getPDDocument());
         System.out.println(ActualPDF);
         String[] Aspl = (new PDFTextStripperByArea()).getText(parser.getPDDocument()).toString().split(TC.Param1);
         UpdateResult.ActualData = Aspl[0];
         String ExpEntireFileText = (new Scanner(new File(System.getProperty("user.dir") + "/src/TestData/" + TC.ExpectedData))).useDelimiter("\\A").next();
         FileWriter writer = new FileWriter(System.getProperty("user.dir") + "/src/TestData/" + TC.InputData);
         writer.write(Aspl[0]);
         writer.flush();
         writer.close();
         String ActEntireFileText = (new Scanner(new File(System.getProperty("user.dir") + "/src/TestData/" + TC.InputData))).useDelimiter("\\A").next();
         System.out.println(ActEntireFileText.trim().matches(ExpEntireFileText.trim()));
         if(ActEntireFileText.trim().matches(ExpEntireFileText.trim())) {
            UpdateResult.ActualData = Aspl[0];
            TC.ExpectedData = Aspl[0];
         } else {
            UpdateResult.ActualData = Aspl[0];
            TC.ExpectedData = ExpEntireFileText;
         }

         parser.getPDDocument().close();
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg9) {
         return CatchStatementWebElement(arg9.getMessage());
      }
   }

   public static String VerifyTextPDFReports_WritetoFile_2Split() throws IOException, InterruptedException {
      Logs.Ulog("---- in VerifyTextPDFReports_WritetoFile_2Split---");

      try {
         driver.manage().timeouts().implicitlyWait(60L, TimeUnit.SECONDS);
         URL e = new URL(driver.getCurrentUrl());
         Cookie authorizationCookie = driver.manage().getCookieNamed("JSESSIONID");
         URLConnection conn = e.openConnection();
         conn.setRequestProperty("Cookie", authorizationCookie.toString());
         InputStream fileToParse = conn.getInputStream();
         PDFParser parser = new PDFParser((RandomAccessRead)fileToParse);
         parser.parse();
         String ActualPDF = (new PDFTextStripperByArea()).getText(parser.getPDDocument());
         System.out.println(ActualPDF);
         String[] Aspl = (new PDFTextStripperByArea()).getText(parser.getPDDocument()).toString().split(TC.Param1);
         UpdateResult.ActualData = Aspl[0];
         String[] Aspl1 = Aspl[0].toString().split(TC.Param2);
         String ExpEntireFileText = (new Scanner(new File(System.getProperty("user.dir") + "/src/TestData/" + TC.ExpectedData))).useDelimiter("\\A").next();
         FileWriter writer = new FileWriter(System.getProperty("user.dir") + "/src/TestData/" + TC.InputData);
         writer.write(Aspl1[1]);
         writer.flush();
         writer.close();
         String ActEntireFileText = (new Scanner(new File(System.getProperty("user.dir") + "/src/TestData/" + TC.InputData))).useDelimiter("\\A").next();
         System.out.println(ActEntireFileText.trim().matches(ExpEntireFileText.trim()));
         if(ActEntireFileText.trim().matches(ExpEntireFileText.trim())) {
            UpdateResult.ActualData = Aspl1[1];
            TC.ExpectedData = Aspl1[1];
         } else {
            UpdateResult.ActualData = Aspl1[1];
            TC.ExpectedData = ExpEntireFileText;
         }

         parser.getPDDocument().close();
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg10) {
         return CatchStatementWebElement(arg10.getMessage());
      }
   }

   public static String DeleAllFileInFolderWithXtn() throws IOException, InterruptedException {
      Logs.Ulog("Start Deleting DeleAllFileInFolderWithXtn ");

      try {
         File e = new File(TC.InputData);
         File[] listOfFiles = e.listFiles();

         for(int i = 0; i < listOfFiles.length; ++i) {
            if(listOfFiles[i].isFile() && listOfFiles[i].getName().endsWith(TC.ExpectedData)) {
               try {
                  listOfFiles[i].delete();
               } catch (Throwable arg3) {
                  Logs.Ulog("Error while Deleting the file ----" + listOfFiles[i].getName());
               }
            }
         }
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }

      UpdateResult.Done();
      Logs.Ulog("End Deleting DeleAllFileInFolderWithXtn");
      return TC.PASS;
   }

   public static String DeleAllFileInTempFolderWithXtn() throws IOException, InterruptedException {
      Logs.Ulog("Start Deleting DeleAllFileInFolderWithXtn ");

      try {
         File e = new File(TC.TempFolder);
         File[] listOfFiles = e.listFiles();

         for(int i = 0; i < listOfFiles.length; ++i) {
            if(listOfFiles[i].isFile() && listOfFiles[i].getName().endsWith(TC.InputData)) {
               try {
                  listOfFiles[i].delete();
               } catch (Throwable arg3) {
                  Logs.Ulog("Error while Deleting the file ----" + listOfFiles[i].getName());
               }
            }
         }
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }

      UpdateResult.Done();
      Logs.Ulog("End Deleting DeleAllFileInFolderWithXtn");
      return TC.PASS;
   }

   public static String DeleAllSubFolders() throws IOException, InterruptedException {
      Logs.Ulog("Start Deleting DeleAllSubFolders ");

      try {
         File e = new File(TC.InputData);
         File[] listOfFiles = e.listFiles();

         for(int i = 0; i < listOfFiles.length; ++i) {
            try {
               listOfFiles[i].delete();
            } catch (Throwable arg3) {
               Logs.Ulog("Error while Deleting the file ----" + listOfFiles[i].getName());
            }
         }
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }

      UpdateResult.Done();
      Logs.Ulog("End Deleting DeleAllSubFolders");
      return TC.PASS;
   }

   public static void DeleAllSubFoldersV2() {
      Logs.Ulog("Start DeleAllSubFolders ");
      File file = new File(TC.InputData);
      recursiveDelete(file);
      Logs.Ulog("End DeleAllSubFolders ");
   }

   public static void recursiveDelete(File root) {
      try {
         if(root == null) {
            return;
         }

         if(root.isDirectory()) {
            File[] files = root.listFiles();
            if(files != null) {
               for(int i = 0; i < files.length; ++i) {
                  File file = files[i];
                  if(file.isDirectory()) {
                     recursiveDelete(file);
                  } else {
                     try {
                        file.delete();
                     } catch (Throwable arg5) {
                        ;
                     }
                  }
               }
            }
         }

         try {
            root.delete();
         } catch (Throwable arg4) {
            ;
         }
      } catch (Throwable arg6) {
         ;
      }

   }

   public static String ClickByRef_scrollDown() throws IOException, InterruptedException {
      Logs.Ulog(" Start ClickByRef_scrollDown ");

      try {
         WebElement e = TORObj();
         ReSetSyncTime();

         for(int i = 0; i < 1000; ++i) {
            try {
               getORObject(TC.ExpectedData);
               Thread.sleep(500L);
               if(TORObj().isDisplayed()) {
                  Logs.Ulog("Click element By SCrolling element has found ");
                  Click();
                  Logs.Ulog("Click element By SCrolling element has found -  Clicked");

                  for(int T = 0; T <= i; ++T) {
                     e.sendKeys(new CharSequence[]{Keys.PAGE_UP});
                  }

                  return UpdateResult.Done();
               }
            } catch (Throwable arg2) {
               e.sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            }
         }

         UpdateResult.ActualData = "Element Not Found";
         TC.ExpectedData = "";
         Logs.Ulog("Click element By SCrolling element has found -  Fail");
         SetDefaultSyncTime();
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         SetDefaultSyncTime();
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String StepSyncV1() throws InterruptedException, IOException {
      try {
         SetDefaultSyncTime();
         int e = 0;

         while(e <= 40) {
            Thread.sleep(2000L);

            try {
               if(!driver.findElement(By.xpath((String)R_Start.StoreTable.get("PageSyncObject"))).isDisplayed()) {
                  SetDefaultSyncTime();
               }
               break;
            } catch (Throwable arg1) {
               Logs.Ulog("Waiting for load page form busy- Waiting for form busy not exist");
               ++e;
            }
         }
      } catch (NoSuchElementException arg2) {
         SetDefaultSyncTime();
         return TC.PASS;
      }

      SetDefaultSyncTime();
      return TC.PASS;
   }

   public static String StepSyncV3() throws InterruptedException, IOException {
      try {
         TC.InputData = "100";
         Thread.sleep(1000L);
         getORObject("Form(BusyForm)");
         Logs.Ulog("Waiting for load page form busy- Waiting for form busy not exist");
         waitForElementNotPresent();
      } catch (NoSuchElementException arg0) {
         Logs.Ulog("Error - while Waiting for load page form busy- Waiting for form busy not exist");
         return TC.PASS;
      }

      SetDefaultSyncTime();
      return TC.PASS;
   }

   public static String StepSync() throws InterruptedException, IOException {
      return TC.PASS;
   }

   public static String CheckForAll() throws InterruptedException, IOException {
      int val = Integer.valueOf(TC.InputData).intValue();
      List testobjs = WebElementsTORObj();

      for(int i = 0; i < testobjs.size(); ++i) {
         if(((WebElement)testobjs.get(i)).getAttribute("type").equals("checkbox")) {
            WrapsDriver wrappedElement = (WrapsDriver)testobjs.get(i);
            RemoteWebDriver js = driver;
            wrappedElement.getWrappedDriver();
            js.executeScript("arguments[0].click();", new Object[]{testobjs.get(i)});
         }
      }

      return UpdateResult.Done();
   }

   public static String UpdateView() throws IOException {
      Logs.Ulog("Start UpdateView ");
      Process p = Runtime.getRuntime().exec("cmd.exe /C start " + System.getProperty("user.dir") + "/src/Homebase.exe");
      Logs.Ulog("End UpdateView ");
      return UpdateResult.Done();
   }

   public static String DayCostReportValidation() throws IOException, InterruptedException {
      Logs.Ulog("Start Report Validation VerifyExcelReportRowCount ");

      try {
         Excel_xls e = new Excel_xls((String)R_Start.StoreTable.get("FilePath"));
         Excel_xls ReportExpected = new Excel_xls(System.getProperty("user.dir") + "/src/TestData/ReportFiles/DayCostReportTemplate.xls");
         UpdateResult.ActualData = Integer.toString(e.getRowCount(TC.Param1));
         TC.ExpectedData = Integer.toString(ReportExpected.getRowCount(TC.Param1));
         TC.TestDescription = "Verify Day cost report row Count";
         TC.PassDescription = "Row count is matching";
         TC.PassDescription = "Row count is not matching";
         UpdateResult.UpdateStatus();
         int Rowcount = Integer.parseInt(TC.Param2);

         for(int i = 0; i <= Rowcount; ++i) {
            for(int j = 0; j <= ReportExpected.getColumnCount(TC.Param1); ++j) {
               if(i == 0 && j == 2) {
                  TC.TestDescription = "Verify Celldata at Row : COl" + i + ":" + j;
                  TC.PassDescription = "Cell data is matching";
                  TC.FailDescription = "Cell data is not matching";
                  String DateReplace = (new SimpleDateFormat("MM/dd/yyyy")).format(new Date());
                  TC.ExpectedData = "Work Date :-" + DateReplace;
                  TC.ExpectedData = TC.ExpectedData.replaceAll(" ", "");
                  UpdateResult.ActualData = e.getCellData(TC.Param1, i, j).replaceAll(" ", "");
                  UpdateResult.UpdateStatus();
               } else {
                  TC.TestDescription = "Verify Celldata at Row : COl" + i + ":" + j;
                  TC.PassDescription = "Cell data is matching";
                  TC.FailDescription = "Cell data is not matching";
                  TC.ExpectedData = ReportExpected.getCellData(TC.Param1, i, j);
                  UpdateResult.ActualData = e.getCellData(TC.Param1, i, j);
                  UpdateResult.UpdateStatus();
               }
            }
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg5) {
         return CatchStatementWebElement(arg5.getMessage());
      }
   }

   public static String GetFilepathByPartialName() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Start VerifyFileExistWithPartialName ");
         boolean e = false;
         File folder = new File(TC.InputData);
         File[] listOfFiles = folder.listFiles();

         for(int i = 0; i < listOfFiles.length; ++i) {
            if(listOfFiles[i].isFile() && listOfFiles[i].getName().contains(TC.ExpectedData)) {
               e = true;
               R_Start.StoreTable.put("FilePath", listOfFiles[i].getAbsolutePath());
            }
         }

         return (String)R_Start.StoreTable.get("FilePath");
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String VerifyFileExistWithPartialName() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Start VerifyFileExistWithPartialName ");
         boolean e = false;
         File folder = new File(TC.InputData);
         File[] listOfFiles = folder.listFiles();

         for(int i = 0; i < listOfFiles.length; ++i) {
            if(listOfFiles[i].isFile() && listOfFiles[i].getName().contains(TC.ExpectedData)) {
               e = true;
               listOfFiles[i].getAbsolutePath();
            }
         }

         if(e) {
            UpdateResult.ActualData = "File Downloaded";
            TC.ExpectedData = "File Downloaded";
            Logs.Ulog("Verifying the text VerifyFileExistWithPartialName Passed ");
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = "File not Downloaded";
            TC.ExpectedData = "File Downloaded";
            Logs.Ulog("Verifying the text VerifyFileExistWithPartialName Failed ");
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String LoadObjectsByEnterKey_ClickRefObj() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the LoadObjectByEnterKey ");

      try {
         int e = Integer.parseInt(TC.InputData);
         getORObject(TC.ExpectedData);
         WebElement StartCard = TORObj();
         getORObject(TC.Param1);
         WebElement Yes = TORObj();
         List ObjElems = WebElementsTORObj();

         for(int i = 0; i < e; ++i) {
            ((WebElement)ObjElems.get(i)).sendKeys(new CharSequence[]{Keys.ENTER});
            Sync();
            TORObj().click();
         }
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }

      return RANDOMCONST;
   }

   public static String selectbyPartialName() throws IOException, InterruptedException {
      Logs.Ulog("selectbyPartialName from list");

      try {
         WebElement e = TORObj();
         Select droplist = new Select(e);

         for(int i = 0; i < droplist.getOptions().size(); ++i) {
            String s1 = ((WebElement)droplist.getOptions().get(i)).getText();
            if(s1.matches(TC.InputData)) {
               ((WebElement)droplist.getOptions().get(i)).click();
               Thread.sleep(200L);
               UpdateResult.ActualData = droplist.getFirstSelectedOption().getText();
               TC.ExpectedData = droplist.getFirstSelectedOption().getText();
               return UpdateResult.UpdateStatus();
            }
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         Logs.Ulog("Error ---  while Seleting list selectbyPartialName from list");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String PageScrollBottom() throws IOException, InterruptedException {
      Logs.Ulog("Start of PageScrollBottom");

      try {
         RemoteWebDriver e = driver;
         e.executeScript("window.scrollTo(0,Math.max(document.documentElement.scrollHeight,document.body.scrollHeight,document.documentElement.clientHeight));", new Object[0]);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String NewFunction() throws IOException {
      return RANDOMCONST;
   }

   public static String SwitchToWindowandVerifyText() throws IOException, InterruptedException {
      Logs.Ulog("Switching to new window and verify text from pdf");
      String parent = null;
      String newwin = null;

      try {
         String e = TC.InputData;
         String data = "";
         String currLine = "";

         for(BufferedReader br = new BufferedReader(new FileReader(System.getProperty("user.dir") + "/src/TestData/" + e + ".txt")); (currLine = br.readLine()) != null; data = data + currLine + " ") {
            ;
         }

         data = data.replace('\r', ' ').replace('\n', ' ').replaceAll("( )+", " ");
         Set handles = driver.getWindowHandles();

         for(Iterator it = handles.iterator(); it.hasNext(); newwin = (String)it.next()) {
            parent = (String)it.next();
         }

         driver.switchTo().window(newwin);
         URL url = new URL(driver.getCurrentUrl());
         Cookie authorizationCookie = driver.manage().getCookieNamed("JSESSIONID");
         URLConnection conn = url.openConnection();
         conn.setRequestProperty("Cookie", authorizationCookie.toString());
         InputStream fileToParse = conn.getInputStream();
         PDFParser parser = new PDFParser((RandomAccessRead)fileToParse);
         parser.parse();
         String pdfdata = (new PDFTextStripperByArea()).getText(parser.getPDDocument());
         parser.getPDDocument().close();
         pdfdata = pdfdata.replace('\r', ' ').replace('\n', ' ').replaceAll("( )+", " ");
         if(pdfdata.matches(data)) {
            UpdateResult.ActualData = TC.PASS;
         } else {
            UpdateResult.ActualData = TC.FAIL;
         }

         driver.close();
         TC.ExpectedData = TC.PASS;
         driver.switchTo().window(parent);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg13) {
         System.out.println("Throwable: " + arg13.getMessage());
         driver.close();
         driver.switchTo().window(parent);
         return CatchStatementWebElement(arg13.getMessage());
      }
   }

   public static String OverWheelSync() throws IOException, InterruptedException {
      Logs.Ulog("------ OverWheelSync------");
      ReSetSyncTime();

      try {
         int e = (int)Double.parseDouble(TC.InputData);

         for(int i = 0; i <= e; ++i) {
            try {
               if(NonExceptionTORObj().isDisplayed()) {
                  Logs.Ulog("------Object Displayed----  ");
                  Thread.sleep(1000L);
               }
            } catch (Throwable arg2) {
               SetDefaultSyncTime();
               break;
            }
         }

         Logs.Ulog("Executed---  OverWheelSync   ");
         SetDefaultSyncTime();
         return TC.PASS;
      } catch (Throwable arg3) {
         SetDefaultSyncTime();
         Logs.Ulog("ERROR---  on OverWheelSync= " + arg3.getMessage());
         return TC.PASS;
      }
   }

   public static String VerifyContentNotEqual() throws IOException, InterruptedException {
      Logs.Ulog("Checking VerifyContentNotEqual of elements");
      Logs.Ulog("Checking VerifyContentNotEqual of elementsExpectedData = " + TC.ExpectedData + "Actual = " + TC.InputData);

      try {
         if(!TC.InputData.equals(TC.ExpectedData)) {
            UpdateResult.ActualData = TC.InputData + " - Not Equal  - " + TC.ExpectedData;
            TC.ExpectedData = TC.InputData + " - Not Equal  - " + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = TC.InputData + " - Equal - " + TC.ExpectedData;
            TC.ExpectedData = TC.InputData + " - Should Not be Equal - " + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyContentEqual() throws IOException, InterruptedException {
      Logs.Ulog("Checking VerifyContentEqual of elements");
      Logs.Ulog("Checking VerifyContentEqual of elementsExpectedData = " + TC.ExpectedData + "Actual = " + TC.InputData);

      try {
         if(TC.InputData.equals(TC.ExpectedData)) {
            UpdateResult.ActualData = TC.InputData + " - Equal  - " + TC.ExpectedData;
            TC.ExpectedData = TC.InputData + " - Equal  - " + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = TC.InputData + " - Equal - " + TC.ExpectedData;
            TC.ExpectedData = TC.InputData + " - Not Equal - " + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String PressALT_A() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing CTRL A function");
         RMouse.keyPress(18);
         RMouse.keyPress(65);
         Thread.sleep(1000L);
         RMouse.keyRelease(18);
         RMouse.keyRelease(65);
         Thread.sleep(200L);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static void Enter4digitrobo() throws IOException, InterruptedException {
      RMouse.keyPress(49);
      RMouse.keyPress(53);
      Thread.sleep(1000L);
      RMouse.keyRelease(48);
      RMouse.keyRelease(49);
   }

   public static void EnterCharA() throws IOException, InterruptedException {
      RMouse.keyPress(65);
   }

   public static String ClearText() throws IOException, InterruptedException {
      UpdateDescription(" Clear text in " + TC.TestObjects);

      try {
         Logs.Ulog("Executing Clear Text function");
         TORObj().clear();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String ClickByRefwithAttribute_scrollDown() throws IOException, InterruptedException {
      Logs.Ulog(" Start ClickByRefwithAttribute_scrollDown ");

      try {
         WebElement e = TORObj();
         ReSetSyncTime();

         for(int i = 0; i < 50; ++i) {
            try {
               getORObject(TC.InputData);
               List T = WebElementsTORObj();
               getORObject(TC.ExpectedData);
               List EleCollectionRef = WebElementsTORObj();
               String found = "NO";

               for(int j = 0; j <= T.size(); ++j) {
                  if(((WebElement)T.get(j)).getAttribute(TC.Param1).equals(TC.Param2)) {
                     found = "YES";

                     try {
                        WrapsDriver e1 = (WrapsDriver)EleCollectionRef.get(j);
                        RemoteWebDriver js = driver;
                        e1.getWrappedDriver();
                        js.executeScript("arguments[0].click();", new Object[]{EleCollectionRef.get(j)});
                     } catch (Throwable arg7) {
                        ((WebElement)EleCollectionRef.get(j)).click();
                     }

                     UpdateResult.ActualData = TC.PASS;
                     TC.ExpectedData = TC.PASS;
                     return UpdateResult.UpdateStatus();
                  }
               }
            } catch (Throwable arg8) {
               e.sendKeys(new CharSequence[]{Keys.PAGE_DOWN});
            }
         }

         UpdateResult.ActualData = "Element Not Found";
         TC.ExpectedData = "";
         Logs.Ulog("Click element By SCrolling element has found -  Fail");
         SetDefaultSyncTime();
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg9) {
         SetDefaultSyncTime();
         return CatchStatementWebElement(arg9.getMessage());
      }
   }

   public static String IsGreaterOrEqual() throws IOException, InterruptedException {
      Logs.Ulog("Checking the in put is grater");

      try {
         if(Integer.parseInt(TC.ExpectedData) >= Integer.parseInt(TC.Param1)) {
            Logs.Ulog(TC.InputData + "Is greater than " + TC.ExpectedData);
            return "true";
         } else {
            return "false";
         }
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String IsEqual() throws IOException, InterruptedException {
      Logs.Ulog("Checking the in put is grater");

      try {
         if(Integer.parseInt(TC.InputData) == Integer.parseInt(TC.ExpectedData)) {
            Logs.Ulog(TC.InputData + "Is greater than " + TC.ExpectedData);
            return "true";
         } else {
            return "false";
         }
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static void login() throws AWTException {
      Robot RMouse = new Robot();
      RMouse.mousePress(0);
      RMouse.keyPress(83);
      RMouse.keyPress(65);
      RMouse.keyPress(78);
      RMouse.keyPress(84);
      RMouse.keyPress(72);
      RMouse.keyPress(79);
      RMouse.keyPress(83);
      RMouse.keyPress(72);
      RMouse.keyPress(65);
      RMouse.keyPress(67);
      RMouse.keyPress(9);
      RMouse.keyPress(16);
      RMouse.keyPress(77);
      RMouse.keyRelease(16);
      RMouse.keyPress(65);
      RMouse.keyPress(82);
      RMouse.keyPress(85);
      RMouse.keyPress(84);
      RMouse.keyPress(72);
      RMouse.keyPress(73);
      RMouse.keyPress(16);
      RMouse.keyPress(50);
      RMouse.keyRelease(16);
      RMouse.keyPress(50);
      RMouse.keyPress(51);
      RMouse.keyPress(52);
      RMouse.keyPress(10);
   }

   public static String Edgemode() throws AWTException, InterruptedException, IOException {
      try {
         Robot e = new Robot();
         e.mousePress(0);
         e.keyPress(123);
         e.keyRelease(123);
         e.keyPress(17);
         e.keyPress(56);
         e.keyRelease(17);
         e.keyPress(17);
         e.keyPress(56);
         e.keyRelease(17);
         e.keyPress(9);
         e.keyRelease(9);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyPress(38);
         e.keyRelease(38);
         Thread.sleep(10000L);
         e.keyPress(27);
         e.keyRelease(27);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyObjectNotHidden() throws IOException, InterruptedException {
      Logs.Ulog(" Verify VerifyObjectNotHidden");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         int x = e.getLocation().x;
         int y = e.getLocation().y;
         if(x > 0 & y > 0) {
            UpdateResult.ActualData = "Elemet is displayed OR not hidden";
            TC.ExpectedData = "Elemet is displayed OR not hidden";
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = "Elemet Should not  displayed OR hidden";
            TC.ExpectedData = "Elemet is displayed OR not hidden";
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String VerifyObjectHidden() throws IOException, InterruptedException {
      Logs.Ulog(" Verify VerifyObjectNotHidden");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         int x = e.getLocation().x;
         int y = e.getLocation().y;
         if(x > 0 & y > 0) {
            UpdateResult.ActualData = "Elemet Should not  displayed OR hidden";
            TC.ExpectedData = "Elemet is displayed OR not hidden";
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = "Elemet is displayed OR not hidden";
            TC.ExpectedData = "Elemet is displayed OR not hidden";
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String VerifyInnerTextContainRegEx() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyInnerTextContainregEx");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].innerText", new Object[]{e});
         if(Pattern.compile(TC.InputData).matcher(UpdateResult.ActualData).find()) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " Innertext not Contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String ClickOnObject1VerifyinnertextObject2() throws IOException, InterruptedException {
      Logs.Ulog("Verifying Object Text");

      try {
         WebElement e = TORObj();
         ReSetSyncTime();

         for(int i = 0; i <= 5; ++i) {
            try {
               Thread.sleep(100L);
               e.click();
               Thread.sleep(3000L);
               getORObject(TC.Param1);
               WebElement Obj2 = NonExceptionTORObj();
               if(Obj2.isDisplayed()) {
                  VerifyInnertext();
                  SetDefaultSyncTime();
                  break;
               }
            } catch (Throwable arg2) {
               ;
            }
         }

         SetDefaultSyncTime();
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         return TC.PASS;
      } catch (Throwable arg3) {
         SetDefaultSyncTime();
         Logs.Ulog("ERROR---  on ClickOnObject1VerifyinnertextObject2 = " + arg3.getMessage());
         return UpdateResult.UpdateStatus();
      }
   }

   public static String clickwd() throws IOException, InterruptedException {
      Logs.Ulog("Executing ClickJS ");
      UpdateDescription("Click on ");

      try {
         UpdateDescription("Click on  " + TC.TestObjects);
         TORObj().click();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String StoreCurrentUrl() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Store a Value StoreCurrentUrl");
         R_Start.StoreTable.put(TC.InputData, driver.getCurrentUrl());
         Logs.Ulog("Store " + driver.getCurrentUrl() + " in " + TC.InputData);
         TC.TestDescription = "Store " + driver.getCurrentUrl() + " in " + TC.InputData;
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         Logs.Ulog("ERROR -- While stor object " + arg0.getMessage());
         CatchStatementWebElement("ERROR -- While stor StoreCurrentUrl  " + arg0.getMessage());
         return TC.FAIL;
      }
   }

   public static String ReplaceAndStoreString() throws IOException, InterruptedException {
      try {
         Logs.Ulog("ReplaceAndStoreString");
         R_Start.StoreTable.put(TC.Param2, TC.InputData.replace(TC.ExpectedData, TC.Param1));
         Logs.Ulog("Store " + TC.InputData + " in " + TC.Param2);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         Logs.Ulog("ERROR -- While stor object " + arg0.getMessage());
         CatchStatementWebElement("ERROR -- While stor StoreCurrentUrl  " + arg0.getMessage());
         return TC.FAIL;
      }
   }

   public static String ClickOnElements() throws IOException, InterruptedException {
      Logs.Ulog("Starting of ClickOnElements ");

      try {
         List e = WebElementsTORObj();

         for(int i = 0; i < e.size(); ++i) {
            try {
               WrapsDriver e1 = (WrapsDriver)e.get(i);
               RemoteWebDriver js = driver;
               e1.getWrappedDriver();
               js.executeScript("arguments[0].click();", new Object[]{e.get(i)});
            } catch (Throwable arg3) {
               ((WebElement)e.get(i)).click();
            }
         }

         UpdateDescription("Click on ");
         return UpdateResult.Done();
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }
   }

   public static void UpdateDescription(String TestDesc) {
      Logs.Ulog("Starting of UpdateDescription ");

      try {
         if(TC.TestDescription.isEmpty()) {
            String[] e = TC.TestObjects.split("\\)");
            String Childclass = e[e.length - 1].replace("(", ">").replace(".", "");
            String Parentclass = e[0].replace("(", ">");
            TC.TestDescription = TestDesc + " " + Childclass + ">on " + Parentclass + ".";
         }
      } catch (Throwable arg3) {
         Logs.Ulog("Error in UpdateDescription " + arg3.getMessage());
      }

   }

   public static void RemoveItemsFormBasket() throws IOException, InterruptedException {
      Logs.Ulog("Starting of RemoveItemsFormBasket ");
      Logs.Ulog("RemoveItemsFormBasket");
      if(!driver.findElement(By.id("minishopcart_total")).getAttribute("innerText").replaceAll(" ", "").equals("0")) {
         try {
            try {
               try {
                  GetTobjNonException("Pg(Home).Header(Common).Link(Your Basket)").click();
                  Thread.sleep(2000L);
                  GetTobjNonException("Pg(Your Basket).Button(View Basket)").click();
               } catch (Throwable arg7) {
                  driver.navigate().refresh();
                  Thread.sleep(10000L);
                  GetTobjNonException("Pg(Home).Header(Common).Link(Your Basket)").click();
                  Thread.sleep(2000L);
                  GetTobjNonException("Pg(Your Basket).Button(View Basket)").click();
               }

               ReSetSyncTime();
               GetTobjNonException("Pg(Your Basket).Element(Your shopping cart is empty)").isDisplayed();
            } catch (Throwable arg9) {
               int i = 0;

               while(i <= 5) {
                  try {
                     GetTobjNonException("Pg(Your Basket).Element(Your shopping cart is empty)").isDisplayed();
                     SetDefaultSyncTime();
                     return;
                  } catch (Throwable arg8) {
                     WebElement Obj = GetTobjNonException("Pg(Your Basket).Button(Remove Product)");

                     WrapsDriver e;
                     RemoteWebDriver js;
                     try {
                        e = (WrapsDriver)Obj;
                        js = driver;
                        e.getWrappedDriver();
                        js.executeScript("arguments[0].click();", new Object[]{Obj});
                     } catch (Throwable arg6) {
                        Obj.click();
                     }

                     Thread.sleep(2000L);
                     Obj = GetTobjNonException("Pg(Your Basket)Element(Are you sure you want to).Button(Yes, Remove)");

                     try {
                        e = (WrapsDriver)Obj;
                        js = driver;
                        e.getWrappedDriver();
                        js.executeScript("arguments[0].click();", new Object[]{Obj});
                     } catch (Throwable arg5) {
                        Obj.click();
                     }

                     Thread.sleep(7000L);
                     ++i;
                  }
               }
            }
         } catch (Throwable arg10) {
            SetDefaultSyncTime();
            Logs.Ulog("ERROR---  on RemoveItemsFormBasket = " + arg10.getMessage());
         }
      }

   }

   public static WebElement GetTobj(String TO) throws IOException, InterruptedException {
      Logs.Ulog("Starting of GetORObject ");

      try {
         getORObject(TO);
         return TORObj();
      } catch (Throwable arg1) {
         Logs.Ulog("ERROR---  on ClickOnObject1VerifyinnertextObject2 = " + arg1.getMessage());
         UpdateResult.UpdateStatus();
         return null;
      }
   }

   public static WebElement GetTobjNonException(String TO) throws IOException, InterruptedException {
      Logs.Ulog("Starting of GetORObject ");

      try {
         getORObject(TO);
         return NonExceptionTORObj();
      } catch (Throwable arg1) {
         Logs.Ulog("ERROR---  on ClickOnObject1VerifyinnertextObject2 = " + arg1.getMessage());
         UpdateResult.UpdateStatus();
         return null;
      }
   }

   public static String CreateGoogleAccount() throws IOException, InterruptedException {
      driver.findElement(By.xpath("//*[@id=\'link-signup\']/a")).click();

      try {
         driver.findElement(By.id("gmail-create-account")).click();
      } catch (Throwable arg2) {
         ;
      }

      try {
         driver.findElement(By.id("FirstName")).sendKeys(new CharSequence[]{TC.Param1});
      } catch (Throwable arg1) {
         ;
      }

      try {
         driver.findElement(By.id("LastName")).sendKeys(new CharSequence[]{TC.Param2});
      } catch (Throwable arg0) {
         ;
      }

      driver.findElement(By.id("Passwd")).sendKeys(new CharSequence[]{"afg@1234"});
      driver.findElement(By.id("PasswdAgain")).sendKeys(new CharSequence[]{"afg@1234"});
      driver.findElement(By.id("HiddenBirthMonth")).click();
      driver.findElement(By.id("//*[@id=\':0\']")).clear();
      driver.findElement(By.id("BirthDay")).sendKeys(new CharSequence[]{"1"});
      driver.findElement(By.id("BirthYear")).sendKeys(new CharSequence[]{"1990"});
      driver.findElement(By.id("HiddenGender")).click();
      driver.findElement(By.id("RecoveryEmailAddress")).sendKeys(new CharSequence[]{"afgwebautotest@Gmail.com"});
      driver.findElement(By.id("SkipCaptcha")).click();
      driver.findElement(By.id("TermsOfService")).click();
      driver.findElement(By.id("submitbutton")).click();
      driver.findElement(By.cssSelector("#expertContent > button")).click();
      return TC.PASS;
   }

   public static String SwitchContext() throws IOException, InterruptedException {
      try {
         System.out.println("Switch Context");
         ((AppiumDriver)driver).context(TC.InputData);
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }

      return TC.PASS;
   }

   public static String KeyBordkeyPress() throws IOException, InterruptedException {
      Logs.Ulog("KeyBordkeyPress");

      try {
         int e = Integer.parseInt(TC.InputData);
         ((AndroidDriver)driver).pressKeyCode(e);
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String InputTextActiveElemnet() throws IOException, InterruptedException {
      Logs.Ulog("InputTextActiveElemnet");

      try {
         driver.switchTo().activeElement().clear();
         driver.switchTo().activeElement().sendKeys(new CharSequence[]{TC.InputData});
         UpdateResult.ActualData = TC.InputData;
         TC.ExpectedData = TC.InputData;
         Logs.Ulog("InputText on obj Done ");
         UpdateDescription("Enter text  " + TC.ExpectedData + " in ");
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static void ClickByAction() throws IOException, InterruptedException {
      try {
         WebElement T = TORObj();
         Actions Mouse = new Actions(driver);
         Mouse.click(T).perform();
      } catch (Throwable arg1) {
         System.out.println(arg1.getMessage());
      }

      System.out.println("Break the test");
   }

   public static void MPMAUnSeletitem() throws IOException, InterruptedException {
      try {
         System.out.println("Break the test");
         driver.manage().timeouts().implicitlyWait(0L, TimeUnit.SECONDS);
         js.executeScript("arguments[0].setAttribute(\'class\',arguments[1]);", new Object[]{TORObj(), TC.InputData});
      } catch (Throwable arg0) {
         System.out.println(arg0.getMessage());
      }

      System.out.println("Break the test");
   }

   public static String SwitchToBrowser_DefaltContent() throws IOException, InterruptedException {
      Logs.Ulog("Successfully Switched to defaultContent");

      try {
         driver.switchTo().defaultContent();
         Logs.Ulog("Successfully Switched to defaultContent");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextFromList() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text from list of elements");

      try {
         List e = WebElementsTORObj();
         String temp = TC.InputData;
         String[] allElementText = temp.split(",");
         if(allElementText.length != e.size()) {
            Logs.Ulog("size of lists do not match");
            UpdateResult.ActualData = Integer.toString(allElementText.length);
            TC.ExpectedData = Integer.toString(e.size());
            return UpdateResult.UpdateStatus();
         }

         byte i = 0;
         if(i < e.size()) {
            if(!allElementText[i].trim().equalsIgnoreCase(((WebElement)e.get(i)).getText().trim())) {
               UpdateResult.ActualData = "- Element not found - " + allElementText[i].trim();
               TC.ExpectedData = ((WebElement)e.get(i)).getText();
               Logs.Ulog("- Text/Element not found -");
               return UpdateResult.UpdateStatus();
            }

            UpdateResult.ActualData = allElementText[i];
            TC.ExpectedData = ((WebElement)e.get(i)).getText();
            Logs.Ulog("- Element found -");
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg3) {
         Logs.Ulog(" - Could not select from list. " + arg3.getMessage());
         return CatchStatementWebElement(arg3.getMessage());
      }

      return TC.PASS;
   }

   public static String SendKeySpace() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeySpace");
         RMouse.mousePress(0);
         RMouse.keyPress(32);
         Thread.sleep(200L);
         RMouse.keyRelease(32);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextFromMasterList() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the text from list of elements with Master List");

      try {
         List e = WebElementsTORObj();
         String temp = TC.InputData;
         String[] empElementText = temp.split(",");
         ArrayList actualTextList = new ArrayList();

         for(int expItem = 0; expItem < e.size(); ++expItem) {
            if(!((WebElement)e.get(expItem)).getText().trim().isEmpty() && !((WebElement)e.get(expItem)).getText().trim().equalsIgnoreCase("")) {
               actualTextList.add(((WebElement)e.get(expItem)).getText().trim());
            }
         }

         if(actualTextList.size() != 0) {
            String[] arg6 = empElementText;
            int arg5 = empElementText.length;

            for(int arg4 = 0; arg4 < arg5; ++arg4) {
               String arg8 = arg6[arg4];
               if(actualTextList.contains(arg8)) {
                  Logs.Ulog("- Text/Element not found - : " + arg8);
                  UpdateResult.ActualData = arg8;
                  TC.ExpectedData = arg8;
                  UpdateResult.UpdateStatus();
               } else {
                  Logs.Ulog("- Text/Element not found - : " + arg8);
                  TC.ExpectedData = "- Element not found - " + arg8;
                  UpdateResult.UpdateStatus();
               }
            }
         } else {
            Logs.Ulog("size of actualTextList is zero");
         }

         return TC.PASS;
      } catch (Throwable arg7) {
         Logs.Ulog(" - Could not select from list. " + arg7.getMessage());
         return CatchStatementWebElement(arg7.getMessage());
      }
   }

   public static String SwitchToFrameByElement() throws IOException, InterruptedException {
      Logs.Ulog("Switched SwitchToFrameByElement");

      try {
         WebElement e = TORObj();
         driver.switchTo().frame(e);
         Logs.Ulog("Successfully Switched ToFrameByElement");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String contextClick() throws IOException, InterruptedException {
      Logs.Ulog("Successfully Switched to context item");

      try {
         WebElement e = TORObj();
         Actions action = new Actions(driver);
         action.contextClick(e).build().perform();
         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String SendKeyENTER() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyEnter");
         TORObj().sendKeys(new CharSequence[]{Keys.ENTER});
         Thread.sleep(200L);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return TC.PASS;
      }
   }

   public static String SwitchToBrowser_Frame_Number() throws IOException, InterruptedException {
      Logs.Ulog("Successfully Switched to new frame");

      try {
         List e = driver.findElementsByTagName("iframe");
         Iterator arg1 = e.iterator();

         while(arg1.hasNext()) {
            WebElement frame = (WebElement)arg1.next();
            if(frame.getAttribute("src").contains(TC.InputData)) {
               driver.switchTo().frame(frame);
               break;
            }
         }

         Logs.Ulog("Successfully Switched to new frame");
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         UpdateResult.ActualData = TC.FAIL;
         UpdateResult.FailDescription = arg2.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String getCurrentURL() throws IOException, InterruptedException {
      Logs.Ulog("Get the current URL");

      try {
         TC.InputData.contains(driver.getCurrentUrl());
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String DbClickSel() throws IOException, InterruptedException {
      Logs.Ulog("Executing DbClickJs ");

      try {
         WebElement e = TORObj();
         TS_Obj().doubleClick(TC.FindByPropVal);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextContent() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyTextContent");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].textContent", new Object[]{e});
         if(UpdateResult.ActualData.contains(TC.InputData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " textContent not Contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String VerifyTextAlignmentCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextAlignmentCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getCssValue("text-align").toLowerCase();
         TC.ExpectedData = TC.InputData.toLowerCase();
         UpdateResult.UpdateStatus();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextbackgroundColorCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getCssValue("background-color").toLowerCase();
         TC.ExpectedData = TC.InputData.toLowerCase();
         UpdateResult.UpdateStatus();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextForegroundColorCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getCssValue("foreground-color").toLowerCase();
         TC.ExpectedData = TC.InputData.toLowerCase();
         UpdateResult.UpdateStatus();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String ViewElement() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEleBefore");

      try {
         WebElement e = TORObj();
         driver.executeScript("arguments[0].scrollIntoView(true);", new Object[]{e});
         Thread.sleep(3000L);
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String ViewElement_Noexc() throws IOException, InterruptedException {
      Logs.Ulog("Get Object GetPostionWebEleBefore");

      try {
         ReSetSyncTime();
         WebElement e = TORObj();
         driver.executeScript("arguments[0].scrollIntoView(true);", new Object[]{e});
         SetDefaultSyncTime();
         Thread.sleep(3000L);
         return TC.PASS;
      } catch (Throwable arg0) {
         SetDefaultSyncTime();
         return TC.PASS;
      }
   }

   public static String selectbyIndex_LastIndex() throws IOException, InterruptedException {
      Logs.Ulog("Selecting from list");

      try {
         WebElement e = TORObj();
         Select droplist = new Select(e);

         for(int i = 0; i < droplist.getOptions().size(); ++i) {
            int sl = droplist.getOptions().size() - 2;
            if(sl == i) {
               ((WebElement)droplist.getOptions().get(i)).click();
               Thread.sleep(200L);
               UpdateResult.ActualData = droplist.getFirstSelectedOption().getText();
               TC.ExpectedData = droplist.getFirstSelectedOption().getText();
               return UpdateResult.UpdateStatus();
            }
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg3) {
         Logs.Ulog("Error ---  while Seleting list Selecting from list");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String HideKeyBoard() throws IOException, InterruptedException {
      Logs.Ulog("HideKeyBoard");

      try {
         ((AppiumDriver)driver).hideKeyboard();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GoButton() throws IOException, InterruptedException {
      Logs.Ulog("HideKeyBoard");

      try {
         ((AppiumDriver)driver).getKeyboard().pressKey(Keys.ENTER);
         if(R_Start.StoreTable.get("Execute ON Browser").equals("PerfectoAndroidDevice") || R_Start.StoreTable.get("Execute ON Browser").equals("AndroidEmulator") || R_Start.StoreTable.get("Execute ON Browser").equals("AndroidLocalDevice")) {
            ((AppiumDriver)driver).hideKeyboard();
         }

         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifytextContentContains() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifytextContentContains");

      try {
         WebElement e = TORObj();
         WrapsDriver wrappedElement = (WrapsDriver)e;
         RemoteWebDriver js = driver;
         wrappedElement.getWrappedDriver();
         UpdateResult.ActualData = (String)js.executeScript("return arguments[0].textContent", new Object[]{e});
         if(UpdateResult.ActualData.contains(TC.InputData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " TextContent not Contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String StoreSetup_Browser_device() throws IOException, InterruptedException {
      try {
         Logs.Ulog("start UpdateSetupBrowser_device ");
         R_Start.StoreTable.put("Previous_Browser_Device", R_Start.StoreTable.get("Execute ON Browser"));
         R_Start.StoreTable.get("Execute ON Browser");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         Logs.Ulog("ERROR -- While start UpdateSetupBrowser_device  " + arg0.getMessage());
         CatchStatementWebElement("ERROR -- While start UpdateSetupBrowser_device " + arg0.getMessage());
         return TC.FAIL;
      }
   }

   public static String ResetSetup_Browser_device() throws IOException, InterruptedException {
      try {
         Logs.Ulog("start UpdateSetupBrowser_device ");
         R_Start.StoreTable.put("Execute ON Browser", R_Start.StoreTable.get("Previous_Browser_Device"));
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         Logs.Ulog("ERROR -- While start UpdateSetupBrowser_device  " + arg0.getMessage());
         CatchStatementWebElement("ERROR -- While start UpdateSetupBrowser_device " + arg0.getMessage());
         return TC.FAIL;
      }
   }

   public static String PerfectoBrowser() throws IOException, InterruptedException {
      try {
         driver = null;
         String T = "mobileOS";
         DesiredCapabilities capabilities = new DesiredCapabilities(T, "", Platform.ANY);
         capabilities.setCapability("deviceName", R_Start.StoreTable.get("PF_AndroiddeviceName"));
         capabilities.setCapability("user", R_Start.StoreTable.get("PF_user"));
         capabilities.setCapability("password", R_Start.StoreTable.get("PF_password"));
         capabilities.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
         String host = (String)R_Start.StoreTable.get("PF_host");
         driver = new RemoteWebDriver(new URL("https://" + host + "/wd/hub"), capabilities);
         Thread.sleep(20000L);
         driver.manage().deleteAllCookies();
         implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
         driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         Logs.Ulog("ERROR -- While start UpdateSetupBrowser_device  " + arg2.getMessage());
         CatchStatementWebElement("ERROR -- While start UpdateSetupBrowser_device " + arg2.getMessage());
         return TC.FAIL;
      }
   }

   public static String PerfectoiOSBrowser() throws IOException, InterruptedException {
      try {
         driver = null;
         String T = "mobileOS";
         DesiredCapabilities capabilities = new DesiredCapabilities(T, "", Platform.ANY);
         capabilities.setCapability("deviceName", R_Start.StoreTable.get("PF_IOSdeviceName"));
         capabilities.setCapability("user", R_Start.StoreTable.get("PF_user"));
         capabilities.setCapability("password", R_Start.StoreTable.get("PF_password"));
         capabilities.setCapability("resetKeyboard", R_Start.StoreTable.get("resetKeyboard"));
         String host = (String)R_Start.StoreTable.get("PF_host");
         driver = new RemoteWebDriver(new URL("https://" + host + "/wd/hub"), capabilities);
         Thread.sleep(20000L);
         implicitWaitTime = (int)Double.parseDouble((String)R_Start.StoreTable.get("Browser time out"));
         driver.manage().timeouts().implicitlyWait((long)implicitWaitTime, TimeUnit.SECONDS);
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         Logs.Ulog("ERROR -- While start UpdateSetupBrowser_device  " + arg2.getMessage());
         CatchStatementWebElement("ERROR -- While start UpdateSetupBrowser_device " + arg2.getMessage());
         return TC.FAIL;
      }
   }

   public static String GetTestDataURL() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestDataURL");

      try {
         ExcelObj e = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.InputData);
         driver.navigate().to(e.getCellData("DMPURL", "PublishingInstanceURL", RN));
         Logs.Ulog("Successfully GetTestDataURL");
         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String GetTestData() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.InputData);
         String CN = TC.ExpectedData;
         R_Start.StoreTable.put(TC.Param1, Testdata.getCellData(TC.TestObjects, CN, RN));
         R_Start.StoreTable.get(TC.Param1);
         Logs.Ulog("Successfully end GetTestData  = " + R_Start.StoreTable.get(TC.Param1));
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String GetTestDataByPath() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.Param1);
         int RN = Integer.parseInt(TC.InputData);
         int CN = Integer.parseInt(TC.ExpectedData);
         R_Start.StoreTable.put(TC.Param2, Testdata.getCellData(TC.TestObjects, CN, RN));
         Logs.Ulog("Successfully end GetTestData  = " + R_Start.StoreTable.get(TC.Param1));
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String CompareExcelData() throws IOException, InterruptedException {
      Logs.Ulog("Satrt CompareExcelData");

      try {
         ExcelObj e = new ExcelObj(TC.TestObjects);
         int CN = Integer.parseInt(WebServices.Round(TC.Param2));
         int RN = Integer.parseInt(WebServices.Round(TC.Param3));
         UpdateResult.ActualData = String.valueOf(WebServices.Round(e.getCellData(TC.Param1, CN, RN)));
         TC.ExpectedData = WebServices.Round(TC.InputData.replace(",", ""));
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String SetTestData() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.Param1);
         String CN = TC.ExpectedData;
         Testdata.setCellData(TC.TestObjects, CN, RN, TC.InputData);
         Logs.Ulog("Successfully end GetTestData");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String SetTestData_AtLastrow() throws IOException, InterruptedException {
      Logs.Ulog("Satrt SetTestData_AtLastrow");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Testdata.getRowCount(TC.TestObjects);
         String CN = TC.ExpectedData;
         Testdata.setCellData(TC.TestObjects, CN, RN + 1, TC.InputData);
         Logs.Ulog("Successfully end SetTestData_AtLastrow");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String GetTestData_AtLastrow() throws IOException, InterruptedException {
      Logs.Ulog("Satrt SetTestData_AtLastrow");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Testdata.getRowCount(TC.TestObjects);
         String CN = TC.ExpectedData;
         Testdata.getCellData(TC.TestObjects, CN, RN);
         R_Start.StoreTable.put(TC.Param1, Testdata.getCellData(TC.TestObjects, CN, RN));
         Logs.Ulog("Successfully end SetTestData_AtLastrow");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String SetTestDataExternal() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         ExcelObj e = new ExcelObj(TC.TestObjects);
         int RN = Integer.parseInt(TC.Param1);
         String CN = TC.ExpectedData;
         e.setCellData(TC.InputData, CN, RN, TC.Param2);
         System.out.println(e.getCellData(TC.InputData, CN, RN));
         Logs.Ulog("Successfully end GetTestData");
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }
   }

   public static String SetTestDataStatus_Equal() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.Param1);
         String CN = TC.ExpectedData;
         String Actual = Testdata.getCellData(TC.TestObjects, "Actual", RN);
         String Expected = Testdata.getCellData(TC.TestObjects, "Expected", RN);
         if(!Actual.isEmpty() && !Expected.isEmpty() && Actual.contentEquals(Expected) && !Actual.contains("<title>500") && !Expected.contains("<title>500")) {
            Testdata.setCellData(TC.TestObjects, "Status", RN, "PASS");
            TC.TestDescription = "Text contect validation ";
            TC.PassDescription = "Content Matching ";
            UpdateResult.ActualData = "Content  matching";
            TC.ExpectedData = UpdateResult.ActualData;
            UpdateResult.UpdateStatus();
         } else {
            Testdata.setCellData(TC.TestObjects, "Status", RN, "FAIL");
            TC.TestDescription = "Text contect validation ";
            TC.PassDescription = "Content Not Matching ";
            UpdateResult.ActualData = "Content not matching";
            TC.ExpectedData = "Content Should be equal";
            UpdateResult.UpdateStatus();
         }

         Logs.Ulog("Successfully end SetTestDataStatus_Equal");
         return UpdateResult.Done();
      } catch (Throwable arg5) {
         return CatchStatementWebElement(arg5.getMessage());
      }
   }

   public static String ClearOldResponses() throws IOException, InterruptedException {
      Logs.Ulog("Satrt ClearOldResponses");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.Param1);
         String CN = TC.ExpectedData;
         Testdata.setCellData(TC.TestObjects, "Expected", RN, "");
         Testdata.setCellData(TC.TestObjects, "Actual", RN, "");
         Testdata.setCellData(TC.TestObjects, "Status", RN, "");
         Logs.Ulog("Successfully end ClearOldResponses");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String ValidateContentStructure() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int n = Testdata.getRowCount(TC.TestObjects);
         int RN = Integer.parseInt(TC.Param1);
         String TempFile = Testdata.getCellData(TC.TestObjects, "StructureFileName", RN);
         String[] format = TempFile.split(",");
         StringBuffer stringBuffer = null;
         String Result = "";
         String TempContent = "";
         String Actual;
         String Expected;
         if(TC.InputData.contains("Template")) {
            Expected = Testdata.getCellData(TC.TestObjects, "Expected", RN);
            System.out.println(format[0] + " = " + format[1]);
            File resphtml = new File(TC.TestDataPath + "/Structure/" + format[0] + ".txt");
            BufferedReader temphtml = new BufferedReader(new FileReader(resphtml));
            stringBuffer = new StringBuffer();

            String line;
            while((line = temphtml.readLine()) != null) {
               stringBuffer.append(line.trim());
               stringBuffer.append("\n");
            }

            Actual = stringBuffer.toString();
            temphtml.close();
         } else {
            Actual = Testdata.getCellData(TC.TestObjects, "Expected", RN);
            Expected = Testdata.getCellData(TC.TestObjects, "Actual", RN);
         }

         if(format[1].equalsIgnoreCase("HTML")) {
            Document resphtml1 = Jsoup.parse(Expected);
            Document temphtml1 = Jsoup.parse(Actual);
            System.out.println(temphtml1);
            System.out.println(resphtml1);
            String response = removeComments(resphtml1);
            String Template = removeComments(temphtml1);
            resphtml1 = Jsoup.parse(response);
            temphtml1 = Jsoup.parse(Template);
            System.out.println(temphtml1);
            System.out.println("-----------------------------Response startes--------------------");
            System.out.println(resphtml1);
            Result = Result + validateHTML(resphtml1.childNodes(), temphtml1.childNodes());
         } else {
            System.out.println(Actual);
            Result = Result + ValidateJSON(Expected, Actual);
         }

         Testdata.setCellData(TC.TestObjects, "Result", RN, Result);
         System.out.println(Result);
         if(!matched) {
            Testdata.setCellData(TC.TestObjects, "Status", RN, "FAIL");
            TC.TestDescription = "HTML Structure Validation";
            TC.PassDescription = "Response Structure Should match mock Template";
            UpdateResult.ActualData = "Response Structure does not match mock Template";
            TC.ExpectedData = "Html structure should match";
            UpdateResult.UpdateStatus();
         } else {
            Testdata.setCellData(TC.TestObjects, "Status", RN, "PASS");
            TC.TestDescription = "HTML Structure Validation";
            TC.PassDescription = "Response Structure Should match mock Template";
            UpdateResult.ActualData = "Response Html structure matched mock";
            TC.ExpectedData = "Response Html structure matched mock";
            UpdateResult.UpdateStatus();
         }

         Logs.Ulog("Successfully end SetTestDataStatus_Equal");
         return UpdateResult.Done();
      } catch (Throwable arg15) {
         return CatchStatementWebElement(arg15.getMessage());
      }
   }

   private static String ValidateJSON(String resp, String temp) {
      String Result = "";

      try {
         JSONObject e = new JSONObject(temp);
         JSONObject respnode = new JSONObject(resp);
         JSONArray temparr = e.getJSONArray("Data");
         JSONArray resparr = respnode.getJSONArray("Data");

         for(int l = 0; l < temparr.length(); ++l) {
            JSONArray temparr2 = temparr.getJSONObject(l).getJSONArray("Page");
            JSONArray resparr2 = resparr.getJSONObject(l).getJSONArray("Page");
            System.out.println(temparr.length());

            for(int i = 0; i < temparr2.length(); ++i) {
               JSONArray temparr3 = temparr2.getJSONObject(i).names();
               JSONArray resparr3 = resparr2.getJSONObject(i).names();

               for(int j = 0; j < temparr3.length(); ++j) {
                  String tempkey = temparr3.get(j).toString();
                  System.out.println(tempkey);
                  boolean found = false;

                  for(int k = 0; k < resparr3.length(); ++k) {
                     if(resparr3.get(k).toString().equals(tempkey)) {
                        System.out.println(resparr3.get(k).toString() + " = " + tempkey);
                        found = true;
                        if(!resparr2.getJSONObject(i).getString(tempkey).equals(temparr2.getJSONObject(i).getString(tempkey))) {
                           matched = false;
                           Result = Result + "\n";
                           Result = Result + "Attributes -- " + tempkey + "=" + temparr2.getJSONObject(i).getString(tempkey) + " -- DOES NOT MATCH RESPONSE -- " + tempkey + "=" + resparr2.getJSONObject(i).getString(tempkey);
                           System.err.println("Attributes -- " + tempkey + "=" + temparr2.getJSONObject(i).getString(tempkey) + " -- DOES NOT MATCH RESPONSE -- " + tempkey + "=" + resparr2.getJSONObject(i).getString(tempkey));
                        }
                        break;
                     }
                  }

                  if(!found) {
                     matched = false;
                     Result = Result + "\n";
                     Result = Result + "Attributes -- " + tempkey + "=" + temparr2.getJSONObject(i).getString(tempkey) + " -- NOT AVAILABLE IN RESPONSE -- ";
                     System.err.println("Attributes -- " + tempkey + "=" + temparr2.getJSONObject(i).getString(tempkey) + " -- NOT AVAILABLE IN RESPONSE -- ");
                  }
               }
            }
         }
      } catch (JSONException arg16) {
         arg16.printStackTrace();
         matched = false;
      }

      return Result;
   }

   private static String validateHTML(List<Node> resp, List<Node> temp) {
      StringBuilder sb = new StringBuilder();
      validateHTML(resp, temp, sb);
      return sb.toString();
   }

   private static void validateHTML(List<Node> resp, List<Node> temp, StringBuilder result) {
      try {
         int e = 0;

         for(int k = 0; e < temp.size(); ++k) {
            if(((Node)temp.get(e)).nodeName() != "#text" && ((Node)resp.get(k)).nodeName() != "#text") {
               System.out.println(((Node)temp.get(e)).nodeName() + "-------------------" + ((Node)resp.get(k)).nodeName());
               if(((Node)temp.get(e)).nodeName().equalsIgnoreCase(((Node)resp.get(k)).nodeName())) {
                  result.append(((Node)temp.get(e)).nodeName() + "  >>  ");
                  System.out.println("Tags Matched");
               } else {
                  result.append("Tag  --> " + ((Node)temp.get(e)).nodeName() + " -- Does Not Match -- " + ((Node)resp.get(k)).nodeName() + " >> ");
                  matched = false;
                  System.out.println("Does not Match ");
                  ++k;

                  while(k < resp.size()) {
                     System.out.println(((Node)resp.get(k)).nodeName());
                     System.out.println(((Node)resp.get(k)).childNodes());
                     if(((Node)resp.get(k)).nodeName() != "text" && ((Node)resp.get(k)).childNodes().size() > 0) {
                        System.out.println(((Node)resp.get(k)).childNodes().size());
                        System.out.println(((Node)resp.get(k)).childNodes());
                        break;
                     }

                     ++k;
                  }
               }

               validateHTML(((Node)resp.get(k)).childNodes(), ((Node)temp.get(e)).childNodes(), result);
               List tempattrs = ((Node)temp.get(e)).attributes().asList();

               for(int j = 0; j < tempattrs.size(); ++j) {
                  if(((Attribute)tempattrs.get(j)).getKey() != "text" && ((Attribute)tempattrs.get(j)).getKey() != "comment") {
                     if(!((Node)resp.get(k)).attr(((Attribute)tempattrs.get(j)).getKey()).isEmpty()) {
                        if(!((Node)resp.get(k)).attr(((Attribute)tempattrs.get(j)).getKey()).toString().equalsIgnoreCase(((Attribute)tempattrs.get(j)).getValue().toString())) {
                           result.append("\n");
                           result.append(" For Tag --> " + ((Node)resp.get(k)).nodeName() + " -- Atrributes --> " + ((Attribute)tempattrs.get(j)).getKey() + " = " + ((Attribute)tempattrs.get(j)).getValue() + " -- DOES NOT MATCH RESPONSE --" + ((Attribute)tempattrs.get(j)).getKey() + " = " + ((Node)resp.get(k)).attr(((Attribute)tempattrs.get(j)).getKey()));
                           System.out.println(((Node)resp.get(k)).attr(((Attribute)tempattrs.get(j)).getKey()) + " = " + ((Attribute)tempattrs.get(j)).getValue());
                           System.out.println(" For Tag --> " + ((Node)resp.get(k)).nodeName() + " -- Atrributes --> " + ((Attribute)tempattrs.get(j)).getKey() + " = " + ((Attribute)tempattrs.get(j)).getValue() + " Does not match Response Attributes");
                           result.append("\n");
                           matched = false;
                        }
                     } else {
                        result.append("\n");
                        result.append(" For Tag --> " + ((Node)resp.get(k)).nodeName() + " -- Atrributes --> " + ((Attribute)tempattrs.get(j)).getKey() + " = " + ((Attribute)tempattrs.get(j)).getValue() + " -- NOT AVAIALABLE IN RESPONSE");
                        System.out.println(" For Tag --> " + ((Node)resp.get(k)).nodeName() + " -- Atrributes --> " + ((Attribute)tempattrs.get(j)).getKey() + " = " + ((Attribute)tempattrs.get(j)).getValue() + " -- NOT AVAIALABLE IN RESPONSE");
                        result.append("\n");
                     }
                  }
               }
            }

            ++e;
         }
      } catch (Exception arg6) {
         arg6.printStackTrace();
      }

   }

   private static String removeComments(Node node) {
      StringBuilder sb = new StringBuilder();
      removeComments(node, sb);
      return sb.toString();
   }

   private static void removeComments(Node node, StringBuilder sb) {
      int i = 0;

      while(true) {
         while(i < node.childNodes().size()) {
            Node child = node.childNode(i);
            System.out.println(child);
            if(!child.nodeName().equals("#comment") && !child.nodeName().equals("#text") && !child.nodeName().equals("#doctype")) {
               removeComments(child);
               sb.append(child.toString());
               sb.append("\n");
               ++i;
            } else {
               child.remove();
            }
         }

         return;
      }
   }

   private static String validateTags(Elements resp, Elements temp) {
      StringBuilder sb = new StringBuilder();
      validateTags(resp, temp, sb);
      return sb.toString();
   }

   private static void validateTags(Elements resp, Elements temp, StringBuilder result) {
      try {
         for(int i = 0; i < temp.size(); ++i) {
            Element el = (Element)resp.get(i);
            Element el2 = (Element)temp.get(i);
            System.out.println(el2.nodeName() + "--------------------------");
            if(el.nodeName().equals(el2.nodeName())) {
               result.append(el2.nodeName() + "  >>  ");
               System.out.println("Tags Matched");
            } else {
               result.append("Tag  --> " + el2.nodeName() + " -- Does Not Match -- " + el.nodeName() + " >> ");
               matched = false;
               System.out.println("Does not Match xxxxxxx");
               System.out.println(result);
            }

            validateTags(el.children(), el2.children(), result);
         }
      } catch (Exception arg5) {
         ;
      }

   }

   public static String UpdateTestDataURL() throws IOException, InterruptedException {
      Logs.Ulog("Satrt UpdateTestData");

      try {
         ExcelObj e = new ExcelObj(System.getProperty("user.dir") + "/src/TestData/TestData.xlsm");
         int RN = Integer.parseInt(TC.InputData);
         e.setCellData("DMPURL", "PublishingInstanceURL", RN, TC.ExpectedData + TC.Param1 + TC.Param2);
         Logs.Ulog("Successfully UpdateTestData");
         return UpdateResult.Done();
      } catch (Throwable arg1) {
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static String WaitForElementVisibility() throws InterruptedException {
      try {
         Logs.Ulog("Waiting For Element Visibility " + TC.InputData);
         WebElement e = TORObj();
         long waitTime = (long)Integer.parseInt(TC.InputData);
         WebDriverWait wait = new WebDriverWait(driver, waitTime);
         wait.until(ExpectedConditions.visibilityOf(e));
         UpdateDescription("Waiting For Element Visibility  " + TC.InputData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         Logs.Ulog("Error while Waiting For Element Visibility  " + TC.InputData + " " + arg3.getMessage());
         return TC.FAIL;
      }
   }

   public static String waitForElementClickable() throws InterruptedException {
      try {
         Logs.Ulog("Waiting For Element To be Clickable " + TC.InputData);
         WebElement e = TORObj();
         long waitTime = (long)Integer.parseInt(TC.InputData);
         WebDriverWait wait = new WebDriverWait(driver, waitTime);
         wait.until(ExpectedConditions.elementToBeClickable(e));
         UpdateDescription("Waiting For Element To be Clickable  " + TC.InputData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         Logs.Ulog("Error while waiting For Element To be Clickable " + TC.InputData + " " + arg3.getMessage());
         return TC.FAIL;
      }
   }

   public static String waitForElementSelected() throws InterruptedException {
      try {
         Logs.Ulog("Waiting For Element To be Selected " + TC.InputData);
         WebElement e = TORObj();
         long waitTime = (long)Integer.parseInt(TC.InputData);
         WebDriverWait wait = new WebDriverWait(driver, waitTime);
         wait.until(ExpectedConditions.elementToBeSelected(e));
         UpdateDescription("Waiting For Element To be Selected  " + TC.InputData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         Logs.Ulog("Error while Waiting For Element To be Selected " + TC.InputData + " " + arg3.getMessage());
         return TC.FAIL;
      }
   }

   public static String waitForAlert() throws InterruptedException {
      try {
         Logs.Ulog("Waiting For Alert " + TC.InputData);
         long e = (long)Integer.parseInt(TC.InputData);
         WebDriverWait wait = new WebDriverWait(driver, e);
         wait.until(ExpectedConditions.alertIsPresent());
         UpdateDescription("Waiting For Alert  " + TC.InputData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg2) {
         Logs.Ulog("Error while Waiting For Alert " + TC.InputData + " " + arg2.getMessage());
         return TC.FAIL;
      }
   }

   public static String waitForTextPresent() throws InterruptedException {
      try {
         Logs.Ulog("Waiting For Text Present in Element" + TC.InputData);
         WebElement e = TORObj();
         long waitTime = (long)Integer.parseInt(TC.InputData);
         String text = TC.ExpectedData;
         WebDriverWait wait = new WebDriverWait(driver, waitTime);
         wait.until(ExpectedConditions.textToBePresentInElement(e, text));
         UpdateDescription("Waiting For Text Present in Element  " + TC.InputData + " Sec to Sync  ");
         return UpdateResult.Done();
      } catch (Throwable arg4) {
         Logs.Ulog("Error while Waiting For Text Present in Element " + TC.InputData + " " + arg4.getMessage());
         return TC.FAIL;
      }
   }

   public static String getFormattedDate() {
      Date date = new Date();
      SimpleDateFormat sdf = new SimpleDateFormat("MM_dd_yyyy-h_mm_ss a");
      String formattedDate = sdf.format(date);
      formattedDate = formattedDate.replace("-", "").replace(" ", "");
      return formattedDate;
   }

   public static String getArrayAsString(String[] values, String delimiter) throws SQLException, ParseException {
      String arrStr = "";

      for(int i = 0; i < values.length; ++i) {
         if(i + 1 == values.length) {
            arrStr = arrStr + values[i].toString();
         } else {
            arrStr = arrStr + values[i].toString() + delimiter;
         }
      }

      return arrStr;
   }

   public static String[] getStringAsArray(String values) throws SQLException, ParseException {
      String newValue = "";
      if(values.contains("\n")) {
         newValue = values.replaceAll("\n", "");
      } else {
         newValue = values;
      }

      String[] arrStr = newValue.split(";;");
      return arrStr;
   }

   public static HashMap<String, String> getMapFromArray(String[] arr, String splitter) {
      HashMap map = new HashMap();

      for(int i = 0; i < arr.length; ++i) {
         String str = arr[i].toString();
         if(str.contains(":")) {
            int st = str.indexOf(splitter);
            String K = str.substring(0, st);
            String V = str.substring(st + 1);
            map.put(K, V);
         }
      }

      return map;
   }

   public static void setSystemProxy(String proxyhost, String proxyPort) {
      Properties systemProperties = System.getProperties();
      systemProperties.setProperty("http.proxyHost", proxyhost);
      systemProperties.setProperty("http.proxyPort", proxyPort);
      systemProperties.setProperty("https.proxyHost", proxyhost);
      systemProperties.setProperty("https.proxyPort", proxyPort);
   }

   public static String StartTransation() throws IOException, InterruptedException {
      Logs.Ulog("StartTransation");

      try {
         UpdateResult.ActualData = "";
         TC.ExpectedData = "";
         nanoStart = String.valueOf(System.nanoTime());
         milliStart = String.valueOf(System.currentTimeMillis());
         TC.TestDescription = "Start Response time <<<>>> Start Time " + new Date();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String EndTransation() throws IOException, InterruptedException {
      try {
         Logs.Ulog("EndTransation");
         nanoEnd = String.valueOf(System.nanoTime());
         milliEnd = String.valueOf(System.currentTimeMillis());
         milliEnd = String.valueOf(System.currentTimeMillis());
         TC.TestDescription = "End Response time <<<>>> End Time " + new Date();
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String TotalResponseTime() throws IOException, InterruptedException {
      try {
         Logs.Ulog("TotalResponseTime");
         milliTime = Long.parseLong(milliEnd) - Long.parseLong(milliStart);
         nanoTime = Long.parseLong(nanoEnd) - Long.parseLong(nanoStart);
         TC.TestDescription = "Total Response time in Sec =  " + String.valueOf(milliTime / 1000L);
         TC.PassDescription = "Response time in Milliseconds  == " + String.valueOf(milliTime);
         TC.FailDescription = "Response time in NanoSeconds  == " + String.valueOf(nanoTime);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String PrintDeviceVersion() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Start PrintDeviceVersion");
         String e = (String)driver.getCapabilities().getCapability("deviceName");
         String deviceBrowsername = driver.getCapabilities().getBrowserName();
         String devicePlatformName = driver.getCapabilities().getPlatform().name();
         String automationName = (String)driver.getCapabilities().getCapability("automationName");
         Logs.Ulog("End  PrintDeviceVersion ");
         TC.TestDescription = " Device details: " + automationName;
         TC.PassDescription = " Device Name/Id: " + e;
         TC.FailDescription = "Device Browser Name " + deviceBrowsername;
         TC.ExpectedData = "Device Name =" + e;
         UpdateResult.ActualData = "";
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return null;
      }
   }

   public static String Print() throws InterruptedException {
      try {
         System.out.println("Printed Meassage = " + TC.InputData);
         JOptionPane.showMessageDialog((Component)null, TC.InputData, "InfoBox: Printed Meassage", 1);
      } catch (Throwable arg0) {
         Logs.Ulog("Error while print message " + TC.InputData + " " + arg0.getMessage());
      }

      return TC.PASS;
   }

   public static String UserInputBox_Store() throws InterruptedException {
      try {
         String e = JOptionPane.showInputDialog((Component)null, "Enter User value to store");
         JOptionPane.showMessageDialog((Component)null, e);
         R_Start.StoreTable.put("D_UserInput", e);
      } catch (Throwable arg0) {
         Logs.Ulog("Error while input  message " + TC.InputData + " " + arg0.getMessage());
      }

      return TC.PASS;
   }

   public static String PrintResponce() throws InterruptedException {
      try {
         JTextArea e = new JTextArea(20, 20);
         e.setText(TC.InputData);
         e.setWrapStyleWord(true);
         e.setLineWrap(true);
         e.setCaretPosition(0);
         e.setEditable(false);
         JOptionPane.showMessageDialog((Component)null, new JScrollPane(e), "Responce", 1);
      } catch (Throwable arg0) {
         Logs.Ulog("Error while input  message " + TC.InputData + " " + arg0.getMessage());
      }

      return TC.PASS;
   }

   public static String ListOptionSelect() throws IOException, InterruptedException {
      Logs.Ulog("Verifying Object Text");

      try {
         WebElement e = TORObj();
         RoboMouseMoveOnObj();
         ReSetSyncTime();

         for(int i = 0; i <= 5; ++i) {
            try {
               Thread.sleep(100L);
               getORObject(TC.Param1);
               WebElement Option = NonExceptionTORObj();
               e.click();
               Thread.sleep(1000L);
               Option.click();
               Thread.sleep(2000L);
               getORObject(TC.Param2);
               WebElement Objattr = NonExceptionTORObj();
               if(Objattr.getAttribute("value").contains(TC.InputData)) {
                  SetDefaultSyncTime();
                  break;
               }
            } catch (Throwable arg3) {
               ;
            }
         }

         SetDefaultSyncTime();
         Logs.Ulog("Actual data  = " + UpdateResult.ActualData);
         return UpdateResult.Done();
      } catch (Throwable arg4) {
         SetDefaultSyncTime();
         Logs.Ulog("ERROR---  on Mouse Over= " + arg4.getMessage());
         return UpdateResult.UpdateStatus();
      }
   }

   public static String GetPagesource() throws IOException, InterruptedException {
      Logs.Ulog("Get the title of the window opened");

      try {
         R_Start.StoreTable.put(TC.InputData, driver.getPageSource());
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         TC.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String ScrollToElement() throws IOException, InterruptedException {
      UpdateDescription("Scroll To Element ");
      Logs.Ulog("Executing ObjScroll");

      try {
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String installApp() throws IOException, InterruptedException {
      UpdateDescription("Install the application on device ");
      Logs.Ulog("Executing install application");

      try {
         ((AppiumDriver)driver).installApp(TC.InputData);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String isAppInstalled() throws IOException, InterruptedException {
      UpdateDescription("isAppInstalled on device or emulator");
      Logs.Ulog("Executing isAppInstalled");

      try {
         ((AppiumDriver)driver).isAppInstalled(TC.InputData);
         TC.InputData = store();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String printValueinConsole() throws IOException, InterruptedException {
      UpdateDescription("Prints the value in console");
      Logs.Ulog("Executing printValueinConsole");

      try {
         System.out.println("Value***********************=" + TC.InputData);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String isLocked() throws IOException, InterruptedException {
      UpdateDescription("is device or emulator are locked");
      Logs.Ulog("Executing isLocked");

      try {
         TC.InputData = store();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String runAppInBackground() throws IOException, InterruptedException {
      UpdateDescription("Run App in Background");
      Logs.Ulog("Executing runAppInBackground");

      try {
         ((AppiumDriver)driver).runAppInBackground(Integer.parseInt(TC.InputData));
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String pinchElement() throws IOException, InterruptedException {
      UpdateDescription("Pinch the element specified");
      Logs.Ulog("Executing pinch");

      try {
         ((AppiumDriver)driver).pinch(TORObj());
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String pinchByCoordinate() throws IOException, InterruptedException {
      UpdateDescription("Perform pinch action with cooridate specifed");
      Logs.Ulog("Executing pinchByCoordinate");

      try {
         ((AppiumDriver)driver).pinch(Integer.parseInt(TC.InputData), Integer.parseInt(TC.ExpectedData));
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String closeApp() throws IOException, InterruptedException {
      UpdateDescription("Close App");
      Logs.Ulog("Executing closeApp");

      try {
         ((AppiumDriver)driver).closeApp();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String launchApp() throws IOException, InterruptedException {
      UpdateDescription("launch  App");
      Logs.Ulog("Executing launchApp");

      try {
         ((AppiumDriver)driver).launchApp();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement("Error while launch app " + arg0.getMessage());
      }
   }

   public static String chnageScreenOrientation() throws IOException, InterruptedException {
      UpdateDescription("Perform change orientation");
      Logs.Ulog("Executing rotate");

      try {
         if(TC.InputData.equals("LANDSCAPE")) {
            ((AppiumDriver)driver).rotate(ScreenOrientation.LANDSCAPE);
         } else if(TC.InputData.equals("PORTRAIT")) {
            ((AppiumDriver)driver).rotate(ScreenOrientation.PORTRAIT);
         }

         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String zoomElement() throws IOException, InterruptedException {
      UpdateDescription("Perform zoom action on the element specified");
      Logs.Ulog("Executing zoomElement");

      try {
         ((AppiumDriver)driver).zoom(TORObj());
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String zoomByCoordinate() throws IOException, InterruptedException {
      UpdateDescription("Perform zoom action with cooridate specifed");
      Logs.Ulog("Executing zoomByCoordinate");

      try {
         ((AppiumDriver)driver).zoom(Integer.parseInt(TC.InputData), Integer.parseInt(TC.ExpectedData));
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String tapElement() throws IOException, InterruptedException {
      UpdateDescription("Perform tap action on the element specified");
      Logs.Ulog("Executing tapElement");

      try {
         ((AppiumDriver)driver).tap(2, TORObj(), 10);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String tapByCoordinate() throws IOException, InterruptedException {
      UpdateDescription("Perform tap action with cooridate specifed");
      Logs.Ulog("Executing tapByCoordinate");

      try {
         ((AppiumDriver)driver).tap(2, Integer.parseInt(TC.InputData), Integer.parseInt(TC.ExpectedData), 10);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String lockScreen() throws IOException, InterruptedException {
      UpdateDescription("Lock device or emulator screen");
      Logs.Ulog("Executing lockScreen");

      try {
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String resetApp() throws IOException, InterruptedException {
      UpdateDescription("Reset the currently running app for this session");
      Logs.Ulog("Executing resetApps");

      try {
         ((AppiumDriver)driver).resetApp();
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String removeApp() throws IOException, InterruptedException {
      UpdateDescription("Remove the specified app from the device (uninstall)");
      Logs.Ulog("Executing removeApp");

      try {
         ((AppiumDriver)driver).removeApp(TC.InputData);
         UpdateResult.ActualData = TC.PASS;
         TC.ExpectedData = TC.PASS;
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String DeletAllCookies() throws IOException, InterruptedException {
      Logs.Ulog("---- Delet All cookies ----");
      driver.manage().deleteAllCookies();
      return UpdateResult.Done();
   }

   public static String VerifySourceCodeElement() throws IOException, InterruptedException {
      Logs.Ulog("to verify a particular text is present or not on the page,");

      try {
         driver.getPageSource().contains(TC.InputData);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GetCSSAttributeVal_Verify() throws IOException, InterruptedException {
      Logs.Ulog("Verifying the VerifyAttributeVal");

      try {
         UpdateResult.ActualData = TORObj().getCssValue(TC.InputData);
         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String CheckSearchBoxText() throws IOException, InterruptedException {
      Logs.Ulog("---- Start  CheckForJbossStart ----");
      String firstValue = TORObj().getCssValue("placeholder");
      Click();
      String secondtValue = TORObj().getCssValue("placeholder");
      return firstValue.equals(secondtValue)?TC.PASS:TC.FAIL;
   }

   public static String SwitchToBrowser_DynamicFrame() throws IOException, InterruptedException {
      Logs.Ulog("Successfully Switched to Dynamic frame");

      try {
         WebElement e = TORObj();
         driver.switchTo().frame(e);
         Logs.Ulog("Successfully Switched to Dynamic frame");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         UpdateResult.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String SwitchToBrowser_Frame_Index_0() throws IOException, InterruptedException {
      Logs.Ulog(" Switched to Dynamic SwitchToBrowser_Frame_Index_0 ");

      try {
         driver.switchTo().frame(0);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SwitchToBrowser_FrameByIndex() throws IOException, InterruptedException {
      Logs.Ulog(" Switched to Dynamic SwitchToBrowser_FrameByIndex ");

      try {
         driver.switchTo().frame(WebServices.Round(TC.InputData));
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextFontSizeCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = ServiceLibrary.Round(e.getCssValue("font-size"));
         TC.ExpectedData = ServiceLibrary.Round(TC.InputData);
         UpdateResult.UpdateStatus();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextFontFamilyCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = String.valueOf(e.getCssValue("font-family"));
         TC.ExpectedData = String.valueOf(TC.InputData);
         if(UpdateResult.ActualData.contains(TC.ExpectedData)) {
            UpdateResult.UpdateStatus();
         }

         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKeyEsc() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyEsc");
         TORObj().sendKeys(new CharSequence[]{Keys.ESCAPE});
         Thread.sleep(200L);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKeyCTRL_A() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTab");
         HighlightElement();
         TORObj().sendKeys(new CharSequence[]{Keys.chord(new CharSequence[]{Keys.CONTROL, "a"})});
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String ReadImageTextandStore() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing ReadImageTextandStore");
         WebElement t = TORObj();
         String ImgUrl = t.getAttribute("src");
         Logs.Ulog("Image source path : \n" + ImgUrl);
         URL url = new URL(ImgUrl);
         BufferedImage image = ImageIO.read(url);
         String ImgText = (new OCR()).recognizeCharacters((RenderedImage)image);
         R_Start.StoreTable.put(TC.InputData, ImgText);
         return TC.PASS;
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }
   }

   public static void UploadFileAutoIt() throws InterruptedException, IOException {
      try {
         Logs.Ulog(" Executing UploadFileAutoIt " + TC.InputData);
         Logs.Ulog("Text Control: " + TC.ExpectedData);
         Logs.Ulog("Button Control: " + TC.Param1);
         System.out.println("Browser: " + R_Start.StoreTable.get("Execute ON Browser").toString());
         AutoItX e = new AutoItX();
         String title = "";
         String inputText = TC.InputData;
         String controlId = TC.ExpectedData;
         String controlBtn = TC.Param1;
         Thread.sleep(3000L);
         if(R_Start.StoreTable.get("Execute ON Browser").toString().equalsIgnoreCase("Mozilla")) {
            title = "File Upload";
            e.ControlSetText(title, "", controlId, inputText);
            Thread.sleep(3000L);
            e.controlClick(title, "", controlBtn);
         } else {
            title = "Open";
            e.ControlSetText(title, "", controlId, inputText);
            Thread.sleep(3000L);
            e.controlClick(title, "", controlBtn);
         }
      } catch (Exception arg4) {
         CatchStatementWebElement(arg4.getMessage());
      }

   }

   public static String SwitchToBrowser_Frame() throws IOException, InterruptedException {
      Logs.Ulog("Successfully Switched to new frame");

      try {
         driver.switchTo().frame(TC.InputData);
         Logs.Ulog("Successfully Switched to new frame");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         UpdateResult.ActualData = TC.FAIL;
         UpdateResult.FailDescription = arg0.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String VerifyTextFontSizeCSS_Web_Mobile() throws IOException, InterruptedException {
      WebElement e;
      if(!R_Start.StoreTable.get("Execute ON Browser").equals("Mozilla") && !R_Start.StoreTable.get("Execute ON Browser").equals("IE")) {
         if(!R_Start.StoreTable.get("Execute ON Browser").equals("PerfectoiOSBrowser") && !R_Start.StoreTable.get("Execute ON Browser").equals("PerfectoBrowser") && !R_Start.StoreTable.get("Execute ON Browser").equals("Chrome")) {
            return ALM_UpdateStatus_HTMLAttchment;
         } else {
            Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

            try {
               e = TORObj();
               UpdateResult.ActualData = String.valueOf(Math.floor(Double.valueOf((double)(e.getCssValue("font-size").length() - 2)).doubleValue() / 5.65D * 100.0D) / 100.0D + "em");
               TC.ExpectedData = String.valueOf(TC.Param1);
               UpdateResult.UpdateStatus();
               return TC.PASS;
            } catch (Throwable arg0) {
               return CatchStatementWebElement(arg0.getMessage());
            }
         }
      } else {
         Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

         try {
            e = TORObj();
            UpdateResult.ActualData = String.valueOf(Math.floor(Double.valueOf((double)(e.getCssValue("font-size").length() - 2)).doubleValue() / 5.65D * 100.0D) / 100.0D + "em");
            TC.ExpectedData = String.valueOf(TC.InputData);
            UpdateResult.UpdateStatus();
            return TC.PASS;
         } catch (Throwable arg1) {
            return CatchStatementWebElement(arg1.getMessage());
         }
      }
   }

   public static String EndTestCase() throws IOException, InterruptedException {
      Logs.Ulog("EndTestCase");
      UpdateResult.Done();
      return TC.PASS;
   }

   public static void Break() throws IOException, InterruptedException {
      try {
         System.out.println("Break the test");
         driver.manage().timeouts().implicitlyWait(2L, TimeUnit.SECONDS);
      } catch (Throwable arg0) {
         System.out.println(arg0.getMessage());
      }

      System.out.println("Break the test");
   }

   public static String VerifyTextFontSizeCSS_New() throws IOException, InterruptedException {
      WebElement e;
      if(!R_Start.StoreTable.get("Execute ON Browser").equals("Mozilla") && !R_Start.StoreTable.get("Execute ON Browser").equals("Chrome") && !R_Start.StoreTable.get("Execute ON Browser").equals("IE")) {
         if(!R_Start.StoreTable.get("Execute ON Browser").equals("PerfectoiOSBrowser") && !R_Start.StoreTable.get("Execute ON Browser").equals("PerfectoBrowser")) {
            return ALM_UpdateStatus_HTMLAttchment;
         } else {
            Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

            try {
               e = TORObj();
               UpdateResult.ActualData = ServiceLibrary.Round(e.getCssValue("font-size").replace("px", ""));
               TC.ExpectedData = ServiceLibrary.Round(TC.Param1.replace("px", ""));
               UpdateResult.UpdateStatus();
               return TC.PASS;
            } catch (Throwable arg0) {
               return CatchStatementWebElement(arg0.getMessage());
            }
         }
      } else {
         Logs.Ulog("Start --  VerifyTextbackgroundColorCSS");

         try {
            e = TORObj();
            UpdateResult.ActualData = ServiceLibrary.Round(e.getCssValue("font-size").replace("px", ""));
            TC.ExpectedData = ServiceLibrary.Round(TC.InputData.replace("px", ""));
            UpdateResult.UpdateStatus();
            return TC.PASS;
         } catch (Throwable arg1) {
            return CatchStatementWebElement(arg1.getMessage());
         }
      }
   }

   public static String verifyAttributeReadonly() throws IOException, InterruptedException {
      Logs.Ulog(" Executing verifyAttributeReadonly------------------------  ");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getAttribute("readonly").toString();
         if(UpdateResult.ActualData.contains(TC.InputData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " readonly attribute does not contains --- " + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String RefreshAndVerifyTextPresent() throws InterruptedException, IOException {
      Logs.Ulog(" Starting RefreshAndVerifyTextPresent");

      try {
         int e = Integer.parseInt(TC.InputData);
         int count = 0;
         boolean t = false;
         TC.InputData = "0";
         SetSyncTime();

         try {
            t = NonExceptionTORObj().isDisplayed();
         } catch (Throwable arg4) {
            t = false;
         }

         do {
            try {
               t = NonExceptionTORObj().getText().contains(TC.ExpectedData);
            } catch (Throwable arg3) {
               t = false;
            }

            driver.navigate().refresh();
            Thread.sleep(5000L);
            ++count;
            System.out.println("Waiting for elemnet to load count = " + count);
         } while(!(count > e | t));

         ReSetSyncTime();
         return UpdateResult.Done();
      } catch (Throwable arg5) {
         UpdateResult.ActualData = TC.FAIL;
         UpdateResult.FailDescription = arg5.getMessage();
         UpdateResult.UpdateStatus();
         return TC.FAIL;
      }
   }

   public static String InputText_Robo() throws Exception {
      String sString = TC.InputData;

      try {
         RoboKeyType e = new RoboKeyType();
         e.type(TC.InputData);
         return UpdateResult.Done();
      } catch (Exception arg1) {
         arg1.printStackTrace();
         return CatchStatementWebElement(arg1.getMessage());
      }
   }

   public static void SendKey_Robo() throws Exception {
      try {
         Robot e = new Robot();
         e.keyPress(valueof(TC.InputData));
         e.keyRelease(valueof(TC.InputData));
      } catch (Exception arg0) {
         arg0.printStackTrace();
      }

   }

   public static String getCurrentTestCaseRuntimeTestData() throws Exception {
      Logs.Ulog("Start getCurrentTestCaseTestData");
      boolean iTestCaseRowNumber = true;

      try {
         File e = new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(e + "\\src\\TestData\\TestData.xlsm");
         int iTestCaseRowNumber1 = Testdata.getCellRowNum(TC.TestObjects, "TCID", TC.TestModuleName);
         if(iTestCaseRowNumber1 != -1) {
            Logs.Ulog("Sheet Name:" + TC.TestObjects + "  TestCase Row Found at :" + iTestCaseRowNumber1);
            String CN = TC.InputData;
            R_Start.StoreTable.put(TC.Param1, Testdata.getCellData(TC.TestObjects, CN, iTestCaseRowNumber1));
            Logs.Ulog("Successfully end getCurrentTestCaseTestData");
            return UpdateResult.Done();
         } else {
            Logs.Ulog("Sheet Name:" + TC.TestObjects + "  TestCase Row Not Found");
            throw new RuntimeException();
         }
      } catch (Exception arg4) {
         Logs.Ulog("Failed  getCurrentTestCaseTestData");
         return CatchStatementWebElement(arg4.getMessage());
      }
   }

   public static String setCurrentTestCaseRuntimeTestData() throws Exception {
      Logs.Ulog("Start setCurrentTestCaseRuntimeTestData");
      boolean iTestCaseRowNumber = true;

      try {
         File e = new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(e + "\\src\\TestData\\TestData.xlsm");
         int iTestCaseRowNumber1 = Testdata.getCellRowNum(TC.TestObjects, "TCID", TC.TestModuleName);
         String CN = TC.InputData;
         String ED = TC.ExpectedData;
         if(iTestCaseRowNumber1 != -1) {
            Logs.Ulog("Sheet Name:" + TC.TestObjects + "  TestCase Row Found at :" + iTestCaseRowNumber1);
            Testdata.setCellData(TC.TestObjects, CN, iTestCaseRowNumber1, ED);
            UpdateResult.ActualData = TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         } else {
            Logs.Ulog("Sheet Name:" + TC.TestObjects + "  TestCase Row Not Found...");
            Logs.Ulog("Trying to create new row in Sheet:" + TC.TestObjects + " for :" + TC.TestModuleName);
            if(addDataRowInExcel(Testdata, TC.TestObjects, TC.TestModuleName)) {
               Testdata.setCellData(TC.TestObjects, CN, Testdata.getRowCount(TC.TestObjects), ED);
               UpdateResult.ActualData = TC.ExpectedData;
               return UpdateResult.UpdateStatus();
            } else {
               Logs.Ulog("Failed to add new test data row...");
               return CatchStatementWebElement("Failed to add new test data row...");
            }
         }
      } catch (Throwable arg5) {
         Logs.Ulog("Failed  getCurrentTestCaseTestData");
         return CatchStatementWebElement(arg5.getMessage());
      }
   }

   public static String AddTestDataRowAtEnd(ExcelObj objExcel, String sSheetName, String sColumnValue) throws Exception {
      Logs.Ulog("Start AddTestDataRowAtEnd");
      Logs.Ulog("Add Test Data Row At End");

      try {
         objExcel.setCellData(sSheetName, "TCID", objExcel.getRowCount(sSheetName) + 1, sColumnValue);
         Logs.Ulog("New Row added succesfully...");
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         Logs.Ulog("Failed  getCurrentTestCaseTestData");
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static boolean addDataRowInExcel(ExcelObj objExcel, String sSheetName, String sColumnValue) throws Exception {
      Logs.Ulog("Start addDataRow");
      Logs.Ulog("Adding new data row...");

      try {
         objExcel.setCellData(sSheetName, "TCID", objExcel.getRowCount(sSheetName) + 1, sColumnValue);
         Logs.Ulog("New Row added succesfully...");
         return true;
      } catch (Exception arg3) {
         Logs.Ulog("Failed  addDataRow");
         Logs.Ulog(arg3.getMessage());
         return false;
      }
   }

   public static String GetTestData_WithWorkbookName() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/" + TC.Param2);
         int RN = Integer.parseInt(TC.InputData);
         String CN = TC.ExpectedData;
         R_Start.StoreTable.put(TC.Param1, Testdata.getCellData(TC.TestObjects, CN, RN));
         R_Start.StoreTable.get(TC.Param1);
         Logs.Ulog("Successfully end GetTestData  = " + R_Start.StoreTable.get(TC.Param1));
         return UpdateResult.Done();
      } catch (Throwable arg3) {
         return CatchStatementWebElement(arg3.getMessage());
      }
   }

   public static String VerifyPdfTextContains() throws IOException, InterruptedException {
      try {
         PDDocument t = PDDocument.load(new File(TC.InputData), "UTF-8");
         PDFTextStripper textStripper = new PDFTextStripper();
         String content = textStripper.getText(t);
         System.out.println(content);
         System.out.println(TC.ExpectedData);
         if(content.replaceAll("[^A-Za-z0-9]", "").replaceAll(" ", "").contains(TC.ExpectedData.replaceAll("[^A-Za-z0-9]", "").replaceAll(" ", ""))) {
            UpdateResult.ActualData = content;
            TC.ExpectedData = content;
         } else {
            UpdateResult.ActualData = content;
            TC.ExpectedData = "Content is not macting ";
         }
      } catch (Throwable arg2) {
         return CatchStatementWebElement(arg2.getMessage());
      }

      return UpdateResult.UpdateStatus();
   }

   public static String sendkeysctrs() throws IOException, InterruptedException {
      Logs.Ulog("Checking existance of element");

      try {
         Robot e = new Robot();
         e.keyPress(17);
         e.keyPress(83);
         e.keyRelease(83);
         e.keyRelease(17);
         Thread.sleep(100L);
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }

      return UpdateResult.Done();
   }

   public static String verifyCurrentURL() throws IOException, InterruptedException {
      Logs.Ulog("Verify the current URL");

      try {
         UpdateResult.ActualData = driver.getCurrentUrl();
         TC.ExpectedData = TC.InputData;
         if(UpdateResult.ActualData.contains(TC.ExpectedData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = " URL does not Contains --->" + TC.InputData;
         }

         return UpdateResult.UpdateStatus();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextDecorationCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextAlignmentCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = e.getCssValue("text-decoration").toLowerCase();
         TC.ExpectedData = TC.InputData.toLowerCase();
         if(UpdateResult.ActualData.contains(TC.ExpectedData)) {
            TC.ExpectedData = UpdateResult.ActualData;
         } else {
            TC.ExpectedData = "Text-Decoration attribute does not Contains --->" + TC.InputData;
         }

         UpdateResult.UpdateStatus();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String VerifyTextColorCSS() throws IOException, InterruptedException {
      Logs.Ulog("Start --  VerifyTextColorCSS");

      try {
         WebElement e = TORObj();
         UpdateResult.ActualData = String.valueOf(e.getCssValue("color"));
         TC.ExpectedData = String.valueOf(TC.InputData);
         UpdateResult.UpdateStatus();
         return TC.PASS;
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String getlocalstorage() throws IOException, InterruptedException {
      Logs.Ulog(" Executing getlocalstorage  ");

      try {
         Logs.Ulog(" Verify element  Attribute ==" + driver.executeScript("return window.localStorage.getItem(\'" + TC.InputData.toString() + "\')", new Object[0]));
         R_Start.StoreTable.put(TC.InputData, driver.executeScript("return window.localStorage.getItem(\'" + TC.InputData.toString() + "\')", new Object[0]));
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String GetTestData_UD() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.InputData);
         String CN = TC.ExpectedData;
         R_Start.StoreTable.put(TC.Param1, Testdata.getCellData(TC.TestObjects, CN, RN));
         R_Start.StoreTable.get(TC.Param1);
         Logs.Ulog("Successfully end GetTestData  = " + R_Start.StoreTable.get(TC.Param1));
         String paramvalue = R_Start.StoreTable.get(TC.Param1).toString();
         String Row_Number = String.valueOf(RN);
         R_Start.StoreTable.put("Row_Number", Row_Number);
         if(CN.trim().equals("Domain")) {
            URL = R_Start.StoreTable.get(TC.Param1).toString();
            System.out.println("eref");
         } else if(CN.trim().equals("Domain1")) {
            URL = R_Start.StoreTable.get(TC.Param1).toString();
            System.out.println("eref");
         } else if(CN.trim().equals("Domain2")) {
            URL = R_Start.StoreTable.get(TC.Param1).toString();
            System.out.println("eref");
         } else if(CN.trim().equals("Asset Path")) {
            URL = R_Start.StoreTable.get("URL").toString();
            URL = URL + R_Start.StoreTable.get(TC.Param1).toString();
         } else if(CN.trim().equals("Asset Name")) {
            URL = R_Start.StoreTable.get("URL").toString();
            URL = URL + "/" + R_Start.StoreTable.get(TC.Param1).toString();
         } else if(CN.trim().equals("Asset Extn")) {
            URL = R_Start.StoreTable.get("URL").toString();
            URL = URL + R_Start.StoreTable.get(TC.Param1).toString();
            R_Start.StoreTable.put("URL", URL);
         } else if(CN.trim().equals("Client ID")) {
            URL = R_Start.StoreTable.get("URL").toString();
            URL = URL + "?dmp.clientid=" + R_Start.StoreTable.get(TC.Param1).toString();
         } else if(CN.trim().equals("Binary domain")) {
            URL = R_Start.StoreTable.get("URL").toString();
            if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
               URL = URL + "&binaryDomain=" + R_Start.StoreTable.get(TC.Param1).toString();
            }
         } else if(CN.trim().equals("Link Domain")) {
            URL = R_Start.StoreTable.get("URL").toString();
            if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
               URL = URL + "&linkDomain=" + R_Start.StoreTable.get(TC.Param1).toString();
            }
         } else {
            String FileName;
            if(CN.trim().equals("Link Level")) {
               URL = R_Start.StoreTable.get("URL").toString();
               FileName = R_Start.StoreTable.get(TC.Param1).toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + "&linklevel=" + R_Start.StoreTable.get(TC.Param1).toString();
               }
            } else if(CN.trim().equals("Domain Prefix")) {
               URL = R_Start.StoreTable.get("URL").toString();
               FileName = R_Start.StoreTable.get(TC.Param1).toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + "&domainprefix=" + R_Start.StoreTable.get(TC.Param1).toString();
               }
            } else if(CN.trim().equals("Query ID")) {
               FileName = R_Start.StoreTable.get(TC.Param1).toString();
               URL = R_Start.StoreTable.get("URL").toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + "&queryID=" + R_Start.StoreTable.get(TC.Param1).toString();
               }
            } else if(CN.trim().equals("Param1 name")) {
               FileName = R_Start.StoreTable.get(TC.Param1).toString();
               URL = R_Start.StoreTable.get("URL").toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + "&" + R_Start.StoreTable.get(TC.Param1).toString() + "=";
               }
            } else if(CN.trim().equals("Param1 value")) {
               URL = R_Start.StoreTable.get("URL").toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + R_Start.StoreTable.get(TC.Param1).toString();
               }
            } else if(CN.trim().equals("Param2 name")) {
               URL = R_Start.StoreTable.get("URL").toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + "&" + R_Start.StoreTable.get(TC.Param1).toString() + "=";
               }
            } else if(CN.trim().equals("Param2 value")) {
               URL = R_Start.StoreTable.get("URL").toString();
               if(R_Start.StoreTable.get(TC.Param1).toString() != "") {
                  URL = URL + R_Start.StoreTable.get(TC.Param1).toString();
               }
            } else if(CN.trim().equals("FileName")) {
               URL = R_Start.StoreTable.get("URL").toString();
               FileName = R_Start.StoreTable.get(TC.Param1).toString();
               String FileExt = R_Start.StoreTable.get("FileExt").toString();
               FileName = FileName + FileExt;
               System.out.println("Filename is" + FileName);
               R_Start.StoreTable.put("FileName", FileName);
               System.out.println(R_Start.StoreTable.get("FileName"));
               return UpdateResult.Done();
            }
         }

         if(CN.trim().equals("Asset Extn")) {
            R_Start.StoreTable.put("FileExt", R_Start.StoreTable.get(TC.Param1).toString());
         }

         System.out.println(URL);
         R_Start.StoreTable.put("URL", URL);
         return "true";
      } catch (Throwable arg7) {
         return CatchStatementWebElement(arg7.getMessage());
      }
   }

   public static String VerifyContains() throws IOException, InterruptedException {
      Logs.Ulog("Checking VerifyContains of elements");
      Logs.Ulog("Checking VerifyCintains of elementsExpectedData = " + TC.ExpectedData + "Actual = " + TC.InputData);

      try {
         if(TC.InputData.trim().contains(TC.ExpectedData.trim())) {
            UpdateResult.ActualData = "Actual Data Contains  - " + TC.ExpectedData;
            TC.ExpectedData = "Actual Data Contains  - " + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         } else {
            UpdateResult.ActualData = "Actual Data Contains  - " + TC.ExpectedData;
            TC.ExpectedData = "Actual Data Not Contains  - " + TC.ExpectedData;
            return UpdateResult.UpdateStatus();
         }
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SetTestData_UD() throws IOException, InterruptedException {
      Logs.Ulog("Satrt GetTestData");

      try {
         new File(System.getProperty("user.dir"));
         ExcelObj Testdata = new ExcelObj(TC.TestDataPath + "/TestData.xlsm");
         int RN = Integer.parseInt(TC.Param1);
         String CN = TC.ExpectedData;
         StrSubstitutor sub = new StrSubstitutor(R_Start.StoreTable);
         TC.InputData = sub.replace("${" + TC.InputData + "}");
         Testdata.setCellData(TC.TestObjects, CN, RN, TC.InputData.trim());
         Logs.Ulog("Successfully end GetTestData");
         return UpdateResult.Done();
      } catch (Throwable arg4) {
         return CatchStatementWebElement(arg4.getMessage());
      }
   }

   public static void GetUserDownloadFolderFile() throws IOException {
      String home = System.getProperty("user.home");
      File file = new File(home + "/Downloads/" + TC.InputData);
      Desktop.getDesktop().open(file);
   }

   public static void DeleteUserDownloadFolderFile() throws IOException {
      String home = System.getProperty("user.home");
      File file = new File(home + "/Downloads/" + TC.InputData);
      if(file.exists()) {
         file.delete();
      }

   }

   public static void ConvertIntToStr() {
      String S = R_Start.StoreTable.get(TC.InputData).toString();
      R_Start.StoreTable.put(TC.InputData, S);
   }

   public static void WinActivate() {
      R_Start.Window = new AutoItX();
      R_Start.Window.winActivate(TC.WinTitle);
   }

   public static void StartHub() {
   }

   public static String SendKeyEnterRobo() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTabRobo");
         Robot t = new Robot();
         t.keyPress(10);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SendKey_EnterRobo() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SendKeyTabRobo");
         Robot t = new Robot();
         t.keyPress(10);
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }

   public static String SenkeyJS() throws IOException, InterruptedException {
      try {
         Logs.Ulog("Executing SenkeyJS");
         js = driver;
         WebElement t = TORObj();
         js.executeScript("var kEvent = arguments[0].createEvent(\'KeyboardEvent\');kEvent.initKeyEvent(\'keypress\', true, true, null, false, false, false, false, 74, 74);arguments[0].dispatchEvent(kEvent);", new Object[]{t});
         System.out.println("Done");
         return UpdateResult.Done();
      } catch (Throwable arg0) {
         return CatchStatementWebElement(arg0.getMessage());
      }
   }
}
